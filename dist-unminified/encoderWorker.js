(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("fs"));
	else if(typeof define === 'function' && define.amd)
		define(["fs"], factory);
	else if(typeof exports === 'object')
		exports["EncoderWorker"] = factory(require("fs"));
	else
		root["EncoderWorker"] = factory(root["fs"]);
})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE_fs__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/encoderWorker.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/fast-sound/unminified/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/fast-sound/unminified/index.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("(function webpackUniversalModuleDefinition(root, factory) {\n\tif(true)\n\t\tmodule.exports = factory(__webpack_require__(/*! fs */ \"fs\"));\n\telse {}\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE_fs__) {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// define __esModule on exports\n/******/ \t__webpack_require__.r = function(exports) {\n/******/ \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n/******/ \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n/******/ \t\t}\n/******/ \t\tObject.defineProperty(exports, '__esModule', { value: true });\n/******/ \t};\n/******/\n/******/ \t// create a fake namespace object\n/******/ \t// mode & 1: value is a module id, require it\n/******/ \t// mode & 2: merge all properties of value into the ns\n/******/ \t// mode & 4: return value when already ns object\n/******/ \t// mode & 8|1: behave like require\n/******/ \t__webpack_require__.t = function(value, mode) {\n/******/ \t\tif(mode & 1) value = __webpack_require__(value);\n/******/ \t\tif(mode & 8) return value;\n/******/ \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n/******/ \t\tvar ns = Object.create(null);\n/******/ \t\t__webpack_require__.r(ns);\n/******/ \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n/******/ \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n/******/ \t\treturn ns;\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = \"./src/bundle.js\");\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ \"./node_modules/path-browserify/index.js\":\n/*!***********************************************!*\\\n  !*** ./node_modules/path-browserify/index.js ***!\n  \\***********************************************/\n/*! no static exports found */\n/***/ (function(module, exports) {\n\neval(\"// Copyright Joyent, Inc. and other Node contributors.\\n//\\n// Permission is hereby granted, free of charge, to any person obtaining a\\n// copy of this software and associated documentation files (the\\n// \\\"Software\\\"), to deal in the Software without restriction, including\\n// without limitation the rights to use, copy, modify, merge, publish,\\n// distribute, sublicense, and/or sell copies of the Software, and to permit\\n// persons to whom the Software is furnished to do so, subject to the\\n// following conditions:\\n//\\n// The above copyright notice and this permission notice shall be included\\n// in all copies or substantial portions of the Software.\\n//\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\\n\\n// resolves . and .. elements in a path array with directory names there\\n// must be no slashes, empty elements, or device names (c:\\\\) in the array\\n// (so also no leading and trailing slashes - it does not distinguish\\n// relative and absolute paths)\\nfunction normalizeArray(parts, allowAboveRoot) {\\n  // if the path tries to go above the root, `up` ends up > 0\\n  var up = 0;\\n  for (var i = parts.length - 1; i >= 0; i--) {\\n    var last = parts[i];\\n    if (last === '.') {\\n      parts.splice(i, 1);\\n    } else if (last === '..') {\\n      parts.splice(i, 1);\\n      up++;\\n    } else if (up) {\\n      parts.splice(i, 1);\\n      up--;\\n    }\\n  }\\n\\n  // if the path is allowed to go above the root, restore leading ..s\\n  if (allowAboveRoot) {\\n    for (; up--; up) {\\n      parts.unshift('..');\\n    }\\n  }\\n\\n  return parts;\\n}\\n\\n// Split a filename into [root, dir, basename, ext], unix version\\n// 'root' is just a slash, or nothing.\\nvar splitPathRe =\\n    /^(\\\\/?|)([\\\\s\\\\S]*?)((?:\\\\.{1,2}|[^\\\\/]+?|)(\\\\.[^.\\\\/]*|))(?:[\\\\/]*)$/;\\nvar splitPath = function(filename) {\\n  return splitPathRe.exec(filename).slice(1);\\n};\\n\\n// path.resolve([from ...], to)\\n// posix version\\nexports.resolve = function() {\\n  var resolvedPath = '',\\n      resolvedAbsolute = false;\\n\\n  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\\n    var path = (i >= 0) ? arguments[i] : process.cwd();\\n\\n    // Skip empty and invalid entries\\n    if (typeof path !== 'string') {\\n      throw new TypeError('Arguments to path.resolve must be strings');\\n    } else if (!path) {\\n      continue;\\n    }\\n\\n    resolvedPath = path + '/' + resolvedPath;\\n    resolvedAbsolute = path.charAt(0) === '/';\\n  }\\n\\n  // At this point the path should be resolved to a full absolute path, but\\n  // handle relative paths to be safe (might happen when process.cwd() fails)\\n\\n  // Normalize the path\\n  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {\\n    return !!p;\\n  }), !resolvedAbsolute).join('/');\\n\\n  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';\\n};\\n\\n// path.normalize(path)\\n// posix version\\nexports.normalize = function(path) {\\n  var isAbsolute = exports.isAbsolute(path),\\n      trailingSlash = substr(path, -1) === '/';\\n\\n  // Normalize the path\\n  path = normalizeArray(filter(path.split('/'), function(p) {\\n    return !!p;\\n  }), !isAbsolute).join('/');\\n\\n  if (!path && !isAbsolute) {\\n    path = '.';\\n  }\\n  if (path && trailingSlash) {\\n    path += '/';\\n  }\\n\\n  return (isAbsolute ? '/' : '') + path;\\n};\\n\\n// posix version\\nexports.isAbsolute = function(path) {\\n  return path.charAt(0) === '/';\\n};\\n\\n// posix version\\nexports.join = function() {\\n  var paths = Array.prototype.slice.call(arguments, 0);\\n  return exports.normalize(filter(paths, function(p, index) {\\n    if (typeof p !== 'string') {\\n      throw new TypeError('Arguments to path.join must be strings');\\n    }\\n    return p;\\n  }).join('/'));\\n};\\n\\n\\n// path.relative(from, to)\\n// posix version\\nexports.relative = function(from, to) {\\n  from = exports.resolve(from).substr(1);\\n  to = exports.resolve(to).substr(1);\\n\\n  function trim(arr) {\\n    var start = 0;\\n    for (; start < arr.length; start++) {\\n      if (arr[start] !== '') break;\\n    }\\n\\n    var end = arr.length - 1;\\n    for (; end >= 0; end--) {\\n      if (arr[end] !== '') break;\\n    }\\n\\n    if (start > end) return [];\\n    return arr.slice(start, end - start + 1);\\n  }\\n\\n  var fromParts = trim(from.split('/'));\\n  var toParts = trim(to.split('/'));\\n\\n  var length = Math.min(fromParts.length, toParts.length);\\n  var samePartsLength = length;\\n  for (var i = 0; i < length; i++) {\\n    if (fromParts[i] !== toParts[i]) {\\n      samePartsLength = i;\\n      break;\\n    }\\n  }\\n\\n  var outputParts = [];\\n  for (var i = samePartsLength; i < fromParts.length; i++) {\\n    outputParts.push('..');\\n  }\\n\\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\\n\\n  return outputParts.join('/');\\n};\\n\\nexports.sep = '/';\\nexports.delimiter = ':';\\n\\nexports.dirname = function(path) {\\n  var result = splitPath(path),\\n      root = result[0],\\n      dir = result[1];\\n\\n  if (!root && !dir) {\\n    // No dirname whatsoever\\n    return '.';\\n  }\\n\\n  if (dir) {\\n    // It has a dirname, strip trailing slash\\n    dir = dir.substr(0, dir.length - 1);\\n  }\\n\\n  return root + dir;\\n};\\n\\n\\nexports.basename = function(path, ext) {\\n  var f = splitPath(path)[2];\\n  // TODO: make this comparison case-insensitive on windows?\\n  if (ext && f.substr(-1 * ext.length) === ext) {\\n    f = f.substr(0, f.length - ext.length);\\n  }\\n  return f;\\n};\\n\\n\\nexports.extname = function(path) {\\n  return splitPath(path)[3];\\n};\\n\\nfunction filter (xs, f) {\\n    if (xs.filter) return xs.filter(f);\\n    var res = [];\\n    for (var i = 0; i < xs.length; i++) {\\n        if (f(xs[i], i, xs)) res.push(xs[i]);\\n    }\\n    return res;\\n}\\n\\n// String.prototype.substr - negative index don't work in IE8\\nvar substr = 'ab'.substr(-1) === 'b'\\n    ? function (str, start, len) { return str.substr(start, len) }\\n    : function (str, start, len) {\\n        if (start < 0) start = str.length + start;\\n        return str.substr(start, len);\\n    }\\n;\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcGF0aC1icm93c2VyaWZ5L2luZGV4LmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vRmFzdFNvdW5kLy4vbm9kZV9tb2R1bGVzL3BhdGgtYnJvd3NlcmlmeS9pbmRleC5qcz9kZjdjIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4vLyByZXNvbHZlcyAuIGFuZCAuLiBlbGVtZW50cyBpbiBhIHBhdGggYXJyYXkgd2l0aCBkaXJlY3RvcnkgbmFtZXMgdGhlcmVcbi8vIG11c3QgYmUgbm8gc2xhc2hlcywgZW1wdHkgZWxlbWVudHMsIG9yIGRldmljZSBuYW1lcyAoYzpcXCkgaW4gdGhlIGFycmF5XG4vLyAoc28gYWxzbyBubyBsZWFkaW5nIGFuZCB0cmFpbGluZyBzbGFzaGVzIC0gaXQgZG9lcyBub3QgZGlzdGluZ3Vpc2hcbi8vIHJlbGF0aXZlIGFuZCBhYnNvbHV0ZSBwYXRocylcbmZ1bmN0aW9uIG5vcm1hbGl6ZUFycmF5KHBhcnRzLCBhbGxvd0Fib3ZlUm9vdCkge1xuICAvLyBpZiB0aGUgcGF0aCB0cmllcyB0byBnbyBhYm92ZSB0aGUgcm9vdCwgYHVwYCBlbmRzIHVwID4gMFxuICB2YXIgdXAgPSAwO1xuICBmb3IgKHZhciBpID0gcGFydHMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICB2YXIgbGFzdCA9IHBhcnRzW2ldO1xuICAgIGlmIChsYXN0ID09PSAnLicpIHtcbiAgICAgIHBhcnRzLnNwbGljZShpLCAxKTtcbiAgICB9IGVsc2UgaWYgKGxhc3QgPT09ICcuLicpIHtcbiAgICAgIHBhcnRzLnNwbGljZShpLCAxKTtcbiAgICAgIHVwKys7XG4gICAgfSBlbHNlIGlmICh1cCkge1xuICAgICAgcGFydHMuc3BsaWNlKGksIDEpO1xuICAgICAgdXAtLTtcbiAgICB9XG4gIH1cblxuICAvLyBpZiB0aGUgcGF0aCBpcyBhbGxvd2VkIHRvIGdvIGFib3ZlIHRoZSByb290LCByZXN0b3JlIGxlYWRpbmcgLi5zXG4gIGlmIChhbGxvd0Fib3ZlUm9vdCkge1xuICAgIGZvciAoOyB1cC0tOyB1cCkge1xuICAgICAgcGFydHMudW5zaGlmdCgnLi4nKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcGFydHM7XG59XG5cbi8vIFNwbGl0IGEgZmlsZW5hbWUgaW50byBbcm9vdCwgZGlyLCBiYXNlbmFtZSwgZXh0XSwgdW5peCB2ZXJzaW9uXG4vLyAncm9vdCcgaXMganVzdCBhIHNsYXNoLCBvciBub3RoaW5nLlxudmFyIHNwbGl0UGF0aFJlID1cbiAgICAvXihcXC8/fCkoW1xcc1xcU10qPykoKD86XFwuezEsMn18W15cXC9dKz98KShcXC5bXi5cXC9dKnwpKSg/OltcXC9dKikkLztcbnZhciBzcGxpdFBhdGggPSBmdW5jdGlvbihmaWxlbmFtZSkge1xuICByZXR1cm4gc3BsaXRQYXRoUmUuZXhlYyhmaWxlbmFtZSkuc2xpY2UoMSk7XG59O1xuXG4vLyBwYXRoLnJlc29sdmUoW2Zyb20gLi4uXSwgdG8pXG4vLyBwb3NpeCB2ZXJzaW9uXG5leHBvcnRzLnJlc29sdmUgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHJlc29sdmVkUGF0aCA9ICcnLFxuICAgICAgcmVzb2x2ZWRBYnNvbHV0ZSA9IGZhbHNlO1xuXG4gIGZvciAodmFyIGkgPSBhcmd1bWVudHMubGVuZ3RoIC0gMTsgaSA+PSAtMSAmJiAhcmVzb2x2ZWRBYnNvbHV0ZTsgaS0tKSB7XG4gICAgdmFyIHBhdGggPSAoaSA+PSAwKSA/IGFyZ3VtZW50c1tpXSA6IHByb2Nlc3MuY3dkKCk7XG5cbiAgICAvLyBTa2lwIGVtcHR5IGFuZCBpbnZhbGlkIGVudHJpZXNcbiAgICBpZiAodHlwZW9mIHBhdGggIT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudHMgdG8gcGF0aC5yZXNvbHZlIG11c3QgYmUgc3RyaW5ncycpO1xuICAgIH0gZWxzZSBpZiAoIXBhdGgpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIHJlc29sdmVkUGF0aCA9IHBhdGggKyAnLycgKyByZXNvbHZlZFBhdGg7XG4gICAgcmVzb2x2ZWRBYnNvbHV0ZSA9IHBhdGguY2hhckF0KDApID09PSAnLyc7XG4gIH1cblxuICAvLyBBdCB0aGlzIHBvaW50IHRoZSBwYXRoIHNob3VsZCBiZSByZXNvbHZlZCB0byBhIGZ1bGwgYWJzb2x1dGUgcGF0aCwgYnV0XG4gIC8vIGhhbmRsZSByZWxhdGl2ZSBwYXRocyB0byBiZSBzYWZlIChtaWdodCBoYXBwZW4gd2hlbiBwcm9jZXNzLmN3ZCgpIGZhaWxzKVxuXG4gIC8vIE5vcm1hbGl6ZSB0aGUgcGF0aFxuICByZXNvbHZlZFBhdGggPSBub3JtYWxpemVBcnJheShmaWx0ZXIocmVzb2x2ZWRQYXRoLnNwbGl0KCcvJyksIGZ1bmN0aW9uKHApIHtcbiAgICByZXR1cm4gISFwO1xuICB9KSwgIXJlc29sdmVkQWJzb2x1dGUpLmpvaW4oJy8nKTtcblxuICByZXR1cm4gKChyZXNvbHZlZEFic29sdXRlID8gJy8nIDogJycpICsgcmVzb2x2ZWRQYXRoKSB8fCAnLic7XG59O1xuXG4vLyBwYXRoLm5vcm1hbGl6ZShwYXRoKVxuLy8gcG9zaXggdmVyc2lvblxuZXhwb3J0cy5ub3JtYWxpemUgPSBmdW5jdGlvbihwYXRoKSB7XG4gIHZhciBpc0Fic29sdXRlID0gZXhwb3J0cy5pc0Fic29sdXRlKHBhdGgpLFxuICAgICAgdHJhaWxpbmdTbGFzaCA9IHN1YnN0cihwYXRoLCAtMSkgPT09ICcvJztcblxuICAvLyBOb3JtYWxpemUgdGhlIHBhdGhcbiAgcGF0aCA9IG5vcm1hbGl6ZUFycmF5KGZpbHRlcihwYXRoLnNwbGl0KCcvJyksIGZ1bmN0aW9uKHApIHtcbiAgICByZXR1cm4gISFwO1xuICB9KSwgIWlzQWJzb2x1dGUpLmpvaW4oJy8nKTtcblxuICBpZiAoIXBhdGggJiYgIWlzQWJzb2x1dGUpIHtcbiAgICBwYXRoID0gJy4nO1xuICB9XG4gIGlmIChwYXRoICYmIHRyYWlsaW5nU2xhc2gpIHtcbiAgICBwYXRoICs9ICcvJztcbiAgfVxuXG4gIHJldHVybiAoaXNBYnNvbHV0ZSA/ICcvJyA6ICcnKSArIHBhdGg7XG59O1xuXG4vLyBwb3NpeCB2ZXJzaW9uXG5leHBvcnRzLmlzQWJzb2x1dGUgPSBmdW5jdGlvbihwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJy8nO1xufTtcblxuLy8gcG9zaXggdmVyc2lvblxuZXhwb3J0cy5qb2luID0gZnVuY3Rpb24oKSB7XG4gIHZhciBwYXRocyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMCk7XG4gIHJldHVybiBleHBvcnRzLm5vcm1hbGl6ZShmaWx0ZXIocGF0aHMsIGZ1bmN0aW9uKHAsIGluZGV4KSB7XG4gICAgaWYgKHR5cGVvZiBwICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnRzIHRvIHBhdGguam9pbiBtdXN0IGJlIHN0cmluZ3MnKTtcbiAgICB9XG4gICAgcmV0dXJuIHA7XG4gIH0pLmpvaW4oJy8nKSk7XG59O1xuXG5cbi8vIHBhdGgucmVsYXRpdmUoZnJvbSwgdG8pXG4vLyBwb3NpeCB2ZXJzaW9uXG5leHBvcnRzLnJlbGF0aXZlID0gZnVuY3Rpb24oZnJvbSwgdG8pIHtcbiAgZnJvbSA9IGV4cG9ydHMucmVzb2x2ZShmcm9tKS5zdWJzdHIoMSk7XG4gIHRvID0gZXhwb3J0cy5yZXNvbHZlKHRvKS5zdWJzdHIoMSk7XG5cbiAgZnVuY3Rpb24gdHJpbShhcnIpIHtcbiAgICB2YXIgc3RhcnQgPSAwO1xuICAgIGZvciAoOyBzdGFydCA8IGFyci5sZW5ndGg7IHN0YXJ0KyspIHtcbiAgICAgIGlmIChhcnJbc3RhcnRdICE9PSAnJykgYnJlYWs7XG4gICAgfVxuXG4gICAgdmFyIGVuZCA9IGFyci5sZW5ndGggLSAxO1xuICAgIGZvciAoOyBlbmQgPj0gMDsgZW5kLS0pIHtcbiAgICAgIGlmIChhcnJbZW5kXSAhPT0gJycpIGJyZWFrO1xuICAgIH1cblxuICAgIGlmIChzdGFydCA+IGVuZCkgcmV0dXJuIFtdO1xuICAgIHJldHVybiBhcnIuc2xpY2Uoc3RhcnQsIGVuZCAtIHN0YXJ0ICsgMSk7XG4gIH1cblxuICB2YXIgZnJvbVBhcnRzID0gdHJpbShmcm9tLnNwbGl0KCcvJykpO1xuICB2YXIgdG9QYXJ0cyA9IHRyaW0odG8uc3BsaXQoJy8nKSk7XG5cbiAgdmFyIGxlbmd0aCA9IE1hdGgubWluKGZyb21QYXJ0cy5sZW5ndGgsIHRvUGFydHMubGVuZ3RoKTtcbiAgdmFyIHNhbWVQYXJ0c0xlbmd0aCA9IGxlbmd0aDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgIGlmIChmcm9tUGFydHNbaV0gIT09IHRvUGFydHNbaV0pIHtcbiAgICAgIHNhbWVQYXJ0c0xlbmd0aCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICB2YXIgb3V0cHV0UGFydHMgPSBbXTtcbiAgZm9yICh2YXIgaSA9IHNhbWVQYXJ0c0xlbmd0aDsgaSA8IGZyb21QYXJ0cy5sZW5ndGg7IGkrKykge1xuICAgIG91dHB1dFBhcnRzLnB1c2goJy4uJyk7XG4gIH1cblxuICBvdXRwdXRQYXJ0cyA9IG91dHB1dFBhcnRzLmNvbmNhdCh0b1BhcnRzLnNsaWNlKHNhbWVQYXJ0c0xlbmd0aCkpO1xuXG4gIHJldHVybiBvdXRwdXRQYXJ0cy5qb2luKCcvJyk7XG59O1xuXG5leHBvcnRzLnNlcCA9ICcvJztcbmV4cG9ydHMuZGVsaW1pdGVyID0gJzonO1xuXG5leHBvcnRzLmRpcm5hbWUgPSBmdW5jdGlvbihwYXRoKSB7XG4gIHZhciByZXN1bHQgPSBzcGxpdFBhdGgocGF0aCksXG4gICAgICByb290ID0gcmVzdWx0WzBdLFxuICAgICAgZGlyID0gcmVzdWx0WzFdO1xuXG4gIGlmICghcm9vdCAmJiAhZGlyKSB7XG4gICAgLy8gTm8gZGlybmFtZSB3aGF0c29ldmVyXG4gICAgcmV0dXJuICcuJztcbiAgfVxuXG4gIGlmIChkaXIpIHtcbiAgICAvLyBJdCBoYXMgYSBkaXJuYW1lLCBzdHJpcCB0cmFpbGluZyBzbGFzaFxuICAgIGRpciA9IGRpci5zdWJzdHIoMCwgZGlyLmxlbmd0aCAtIDEpO1xuICB9XG5cbiAgcmV0dXJuIHJvb3QgKyBkaXI7XG59O1xuXG5cbmV4cG9ydHMuYmFzZW5hbWUgPSBmdW5jdGlvbihwYXRoLCBleHQpIHtcbiAgdmFyIGYgPSBzcGxpdFBhdGgocGF0aClbMl07XG4gIC8vIFRPRE86IG1ha2UgdGhpcyBjb21wYXJpc29uIGNhc2UtaW5zZW5zaXRpdmUgb24gd2luZG93cz9cbiAgaWYgKGV4dCAmJiBmLnN1YnN0cigtMSAqIGV4dC5sZW5ndGgpID09PSBleHQpIHtcbiAgICBmID0gZi5zdWJzdHIoMCwgZi5sZW5ndGggLSBleHQubGVuZ3RoKTtcbiAgfVxuICByZXR1cm4gZjtcbn07XG5cblxuZXhwb3J0cy5leHRuYW1lID0gZnVuY3Rpb24ocGF0aCkge1xuICByZXR1cm4gc3BsaXRQYXRoKHBhdGgpWzNdO1xufTtcblxuZnVuY3Rpb24gZmlsdGVyICh4cywgZikge1xuICAgIGlmICh4cy5maWx0ZXIpIHJldHVybiB4cy5maWx0ZXIoZik7XG4gICAgdmFyIHJlcyA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgeHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGYoeHNbaV0sIGksIHhzKSkgcmVzLnB1c2goeHNbaV0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xufVxuXG4vLyBTdHJpbmcucHJvdG90eXBlLnN1YnN0ciAtIG5lZ2F0aXZlIGluZGV4IGRvbid0IHdvcmsgaW4gSUU4XG52YXIgc3Vic3RyID0gJ2FiJy5zdWJzdHIoLTEpID09PSAnYidcbiAgICA/IGZ1bmN0aW9uIChzdHIsIHN0YXJ0LCBsZW4pIHsgcmV0dXJuIHN0ci5zdWJzdHIoc3RhcnQsIGxlbikgfVxuICAgIDogZnVuY3Rpb24gKHN0ciwgc3RhcnQsIGxlbikge1xuICAgICAgICBpZiAoc3RhcnQgPCAwKSBzdGFydCA9IHN0ci5sZW5ndGggKyBzdGFydDtcbiAgICAgICAgcmV0dXJuIHN0ci5zdWJzdHIoc3RhcnQsIGxlbik7XG4gICAgfVxuO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///./node_modules/path-browserify/index.js\\n\");\n\n/***/ }),\n\n/***/ \"./src/bundle.js\":\n/*!***********************!*\\\n  !*** ./src/bundle.js ***!\n  \\***********************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\neval(\"const WASM = __webpack_require__(/*! ../unminified/fast-sound.js */ \\\"./unminified/fast-sound.js\\\");\\nconst Loader = __webpack_require__(/*! ./loader.js */ \\\"./src/loader.js\\\");\\n\\nmodule.exports = Loader(WASM, 'fast-sound.asm.js');\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvYnVuZGxlLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vRmFzdFNvdW5kLy4vc3JjL2J1bmRsZS5qcz84MTdlIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IFdBU00gPSByZXF1aXJlKCcuLi91bm1pbmlmaWVkL2Zhc3Qtc291bmQuanMnKTtcbmNvbnN0IExvYWRlciA9IHJlcXVpcmUoJy4vbG9hZGVyLmpzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gTG9hZGVyKFdBU00sICdmYXN0LXNvdW5kLmFzbS5qcycpO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///./src/bundle.js\\n\");\n\n/***/ }),\n\n/***/ \"./src/loader.js\":\n/*!***********************!*\\\n  !*** ./src/loader.js ***!\n  \\***********************/\n/*! no static exports found */\n/***/ (function(module, exports) {\n\neval(\"module.exports = function(wasmObject, asmjsFilename) {\\n  return function(options) {\\n    options = options || {};\\n\\n    if(\\\"object\\\" === typeof WebAssembly && options['method'] !== 'asm.js') {\\n      return wasmObject(options);\\n    } else {\\n      const readAsync = function(url, onload, onerror) {\\n        var xhr = new XMLHttpRequest();\\n        xhr.open('GET', url, true);\\n        xhr.responseType = 'text';\\n        xhr.onload = function xhr_onload() {\\n          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0\\n            onload(xhr.response);\\n            return;\\n          }\\n          onerror();\\n        };\\n        xhr.onerror = onerror;\\n        xhr.send(null);\\n      };\\n\\n      if('locateFile' in options) {\\n        asmjsFilename = options['locateFile'](asmjsFilename);\\n      }\\n\\n      return new Promise(function(resolve, reject) {\\n        readAsync(asmjsFilename, function(script) {\\n          const exports = {};\\n          var module = eval(script);\\n          module(options).then(function(lib) {\\n            // to avoid infinite resolving loop\\n            lib.then = undefined;\\n            resolve(lib);\\n          });\\n        });\\n      });\\n    }\\n  };\\n};\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvbG9hZGVyLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vRmFzdFNvdW5kLy4vc3JjL2xvYWRlci5qcz8zZDRjIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24od2FzbU9iamVjdCwgYXNtanNGaWxlbmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gICAgaWYoXCJvYmplY3RcIiA9PT0gdHlwZW9mIFdlYkFzc2VtYmx5ICYmIG9wdGlvbnNbJ21ldGhvZCddICE9PSAnYXNtLmpzJykge1xuICAgICAgcmV0dXJuIHdhc21PYmplY3Qob3B0aW9ucyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHJlYWRBc3luYyA9IGZ1bmN0aW9uKHVybCwgb25sb2FkLCBvbmVycm9yKSB7XG4gICAgICAgIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICAgICAgeGhyLm9wZW4oJ0dFVCcsIHVybCwgdHJ1ZSk7XG4gICAgICAgIHhoci5yZXNwb25zZVR5cGUgPSAndGV4dCc7XG4gICAgICAgIHhoci5vbmxvYWQgPSBmdW5jdGlvbiB4aHJfb25sb2FkKCkge1xuICAgICAgICAgIGlmICh4aHIuc3RhdHVzID09IDIwMCB8fCAoeGhyLnN0YXR1cyA9PSAwICYmIHhoci5yZXNwb25zZSkpIHsgLy8gZmlsZSBVUkxzIGNhbiByZXR1cm4gMFxuICAgICAgICAgICAgb25sb2FkKHhoci5yZXNwb25zZSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIG9uZXJyb3IoKTtcbiAgICAgICAgfTtcbiAgICAgICAgeGhyLm9uZXJyb3IgPSBvbmVycm9yO1xuICAgICAgICB4aHIuc2VuZChudWxsKTtcbiAgICAgIH07XG5cbiAgICAgIGlmKCdsb2NhdGVGaWxlJyBpbiBvcHRpb25zKSB7XG4gICAgICAgIGFzbWpzRmlsZW5hbWUgPSBvcHRpb25zWydsb2NhdGVGaWxlJ10oYXNtanNGaWxlbmFtZSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgcmVhZEFzeW5jKGFzbWpzRmlsZW5hbWUsIGZ1bmN0aW9uKHNjcmlwdCkge1xuICAgICAgICAgIGNvbnN0IGV4cG9ydHMgPSB7fTtcbiAgICAgICAgICB2YXIgbW9kdWxlID0gZXZhbChzY3JpcHQpO1xuICAgICAgICAgIG1vZHVsZShvcHRpb25zKS50aGVuKGZ1bmN0aW9uKGxpYikge1xuICAgICAgICAgICAgLy8gdG8gYXZvaWQgaW5maW5pdGUgcmVzb2x2aW5nIGxvb3BcbiAgICAgICAgICAgIGxpYi50aGVuID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgcmVzb2x2ZShsaWIpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///./src/loader.js\\n\");\n\n/***/ }),\n\n/***/ \"./unminified/fast-sound.js\":\n/*!**********************************!*\\\n  !*** ./unminified/fast-sound.js ***!\n  \\**********************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\neval(\"/* WEBPACK VAR INJECTION */(function(__dirname) {\\nvar FastSound = (function() {\\n  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;\\n  return (\\nfunction(FastSound) {\\n  FastSound = FastSound || {};\\n\\n// Copyright 2010 The Emscripten Authors.  All rights reserved.\\n// Emscripten is available under two separate licenses, the MIT license and the\\n// University of Illinois/NCSA Open Source License.  Both these licenses can be\\n// found in the LICENSE file.\\n\\n// The Module object: Our interface to the outside world. We import\\n// and export values on it. There are various ways Module can be used:\\n// 1. Not defined. We create it here\\n// 2. A function parameter, function(Module) { ..generated code.. }\\n// 3. pre-run appended it, var Module = {}; ..generated code..\\n// 4. External script tag defines var Module.\\n// We need to check if Module already exists (e.g. case 3 above).\\n// Substitution will be replaced with actual code on later stage of the build,\\n// this way Closure Compiler will not mangle it (e.g. case 4. above).\\n// Note that if you want to run closure, and also to use Module\\n// after the generated code, you will need to define   var Module = {};\\n// before the code. Then that object will be used in the code, and you\\n// can continue to use Module afterwards as well.\\nvar Module = typeof FastSound !== 'undefined' ? FastSound : {};\\n\\n// --pre-jses are emitted after the Module integration code, so that they can\\n// refer to Module (if they choose; they can also define Module)\\n// {{PRE_JSES}}\\n\\n// Sometimes an existing Module object exists with properties\\n// meant to overwrite the default module functionality. Here\\n// we collect those properties and reapply _after_ we configure\\n// the current environment's defaults to avoid having to be so\\n// defensive during initialization.\\nvar moduleOverrides = {};\\nvar key;\\nfor (key in Module) {\\n  if (Module.hasOwnProperty(key)) {\\n    moduleOverrides[key] = Module[key];\\n  }\\n}\\n\\nModule['arguments'] = [];\\nModule['thisProgram'] = './this.program';\\nModule['quit'] = function(status, toThrow) {\\n  throw toThrow;\\n};\\nModule['preRun'] = [];\\nModule['postRun'] = [];\\n\\n// Determine the runtime environment we are in. You can customize this by\\n// setting the ENVIRONMENT setting at compile time (see settings.js).\\n\\nvar ENVIRONMENT_IS_WEB = false;\\nvar ENVIRONMENT_IS_WORKER = false;\\nvar ENVIRONMENT_IS_NODE = false;\\nvar ENVIRONMENT_IS_SHELL = false;\\nENVIRONMENT_IS_WEB = typeof window === 'object';\\nENVIRONMENT_IS_WORKER = typeof importScripts === 'function';\\nENVIRONMENT_IS_NODE = typeof process === 'object' && \\\"function\\\" === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;\\nENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;\\n\\n\\n// Three configurations we can be running in:\\n// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)\\n// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)\\n// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)\\n\\n\\n// `/` should be present at the end if `scriptDirectory` is not empty\\nvar scriptDirectory = '';\\nfunction locateFile(path) {\\n  if (Module['locateFile']) {\\n    return Module['locateFile'](path, scriptDirectory);\\n  } else {\\n    return scriptDirectory + path;\\n  }\\n}\\n\\nif (ENVIRONMENT_IS_NODE) {\\n  scriptDirectory = __dirname + '/';\\n\\n  // Expose functionality in the same simple way that the shells work\\n  // Note that we pollute the global namespace here, otherwise we break in node\\n  var nodeFS;\\n  var nodePath;\\n\\n  Module['read'] = function shell_read(filename, binary) {\\n    var ret;\\n      if (!nodeFS) nodeFS = __webpack_require__(/*! fs */ \\\"fs\\\");\\n      if (!nodePath) nodePath = __webpack_require__(/*! path */ \\\"./node_modules/path-browserify/index.js\\\");\\n      filename = nodePath['normalize'](filename);\\n      ret = nodeFS['readFileSync'](filename);\\n    return binary ? ret : ret.toString();\\n  };\\n\\n  Module['readBinary'] = function readBinary(filename) {\\n    var ret = Module['read'](filename, true);\\n    if (!ret.buffer) {\\n      ret = new Uint8Array(ret);\\n    }\\n    assert(ret.buffer);\\n    return ret;\\n  };\\n\\n  if (process['argv'].length > 1) {\\n    Module['thisProgram'] = process['argv'][1].replace(/\\\\\\\\/g, '/');\\n  }\\n\\n  Module['arguments'] = process['argv'].slice(2);\\n\\n  // MODULARIZE will export the module in the proper place outside, we don't need to export here\\n\\n  process['on']('uncaughtException', function(ex) {\\n    // suppress ExitStatus exceptions from showing an error\\n    if (!(ex instanceof ExitStatus)) {\\n      throw ex;\\n    }\\n  });\\n  // Currently node will swallow unhandled rejections, but this behavior is\\n  // deprecated, and in the future it will exit with error status.\\n  process['on']('unhandledRejection', abort);\\n\\n  Module['quit'] = function(status) {\\n    process['exit'](status);\\n  };\\n\\n  Module['inspect'] = function () { return '[Emscripten Module object]'; };\\n} else\\nif (ENVIRONMENT_IS_SHELL) {\\n\\n\\n  if (typeof read != 'undefined') {\\n    Module['read'] = function shell_read(f) {\\n      return read(f);\\n    };\\n  }\\n\\n  Module['readBinary'] = function readBinary(f) {\\n    var data;\\n    if (typeof readbuffer === 'function') {\\n      return new Uint8Array(readbuffer(f));\\n    }\\n    data = read(f, 'binary');\\n    assert(typeof data === 'object');\\n    return data;\\n  };\\n\\n  if (typeof scriptArgs != 'undefined') {\\n    Module['arguments'] = scriptArgs;\\n  } else if (typeof arguments != 'undefined') {\\n    Module['arguments'] = arguments;\\n  }\\n\\n  if (typeof quit === 'function') {\\n    Module['quit'] = function(status) {\\n      quit(status);\\n    }\\n  }\\n} else\\nif (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {\\n  if (ENVIRONMENT_IS_WORKER) { // Check worker, not web, since window could be polyfilled\\n    scriptDirectory = self.location.href;\\n  } else if (document.currentScript) { // web\\n    scriptDirectory = document.currentScript.src;\\n  }\\n  // When MODULARIZE (and not _INSTANCE), this JS may be executed later, after document.currentScript\\n  // is gone, so we saved it, and we use it here instead of any other info.\\n  if (_scriptDir) {\\n    scriptDirectory = _scriptDir;\\n  }\\n  // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.\\n  // otherwise, slice off the final part of the url to find the script directory.\\n  // if scriptDirectory does not contain a slash, lastIndexOf will return -1,\\n  // and scriptDirectory will correctly be replaced with an empty string.\\n  if (scriptDirectory.indexOf('blob:') !== 0) {\\n    scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf('/')+1);\\n  } else {\\n    scriptDirectory = '';\\n  }\\n\\n\\n  Module['read'] = function shell_read(url) {\\n      var xhr = new XMLHttpRequest();\\n      xhr.open('GET', url, false);\\n      xhr.send(null);\\n      return xhr.responseText;\\n  };\\n\\n  if (ENVIRONMENT_IS_WORKER) {\\n    Module['readBinary'] = function readBinary(url) {\\n        var xhr = new XMLHttpRequest();\\n        xhr.open('GET', url, false);\\n        xhr.responseType = 'arraybuffer';\\n        xhr.send(null);\\n        return new Uint8Array(xhr.response);\\n    };\\n  }\\n\\n  Module['readAsync'] = function readAsync(url, onload, onerror) {\\n    var xhr = new XMLHttpRequest();\\n    xhr.open('GET', url, true);\\n    xhr.responseType = 'arraybuffer';\\n    xhr.onload = function xhr_onload() {\\n      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0\\n        onload(xhr.response);\\n        return;\\n      }\\n      onerror();\\n    };\\n    xhr.onerror = onerror;\\n    xhr.send(null);\\n  };\\n\\n  Module['setWindowTitle'] = function(title) { document.title = title };\\n} else\\n{\\n}\\n\\n// Set up the out() and err() hooks, which are how we can print to stdout or\\n// stderr, respectively.\\n// If the user provided Module.print or printErr, use that. Otherwise,\\n// console.log is checked first, as 'print' on the web will open a print dialogue\\n// printErr is preferable to console.warn (works better in shells)\\n// bind(console) is necessary to fix IE/Edge closed dev tools panel behavior.\\nvar out = Module['print'] || (typeof console !== 'undefined' ? console.log.bind(console) : (typeof print !== 'undefined' ? print : null));\\nvar err = Module['printErr'] || (typeof printErr !== 'undefined' ? printErr : ((typeof console !== 'undefined' && console.warn.bind(console)) || out));\\n\\n// Merge back in the overrides\\nfor (key in moduleOverrides) {\\n  if (moduleOverrides.hasOwnProperty(key)) {\\n    Module[key] = moduleOverrides[key];\\n  }\\n}\\n// Free the object hierarchy contained in the overrides, this lets the GC\\n// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.\\nmoduleOverrides = undefined;\\n\\n\\n\\n// Copyright 2017 The Emscripten Authors.  All rights reserved.\\n// Emscripten is available under two separate licenses, the MIT license and the\\n// University of Illinois/NCSA Open Source License.  Both these licenses can be\\n// found in the LICENSE file.\\n\\n// {{PREAMBLE_ADDITIONS}}\\n\\nvar STACK_ALIGN = 16;\\n\\n\\nfunction staticAlloc(size) {\\n  var ret = STATICTOP;\\n  STATICTOP = (STATICTOP + size + 15) & -16;\\n  return ret;\\n}\\n\\nfunction dynamicAlloc(size) {\\n  var ret = HEAP32[DYNAMICTOP_PTR>>2];\\n  var end = (ret + size + 15) & -16;\\n  HEAP32[DYNAMICTOP_PTR>>2] = end;\\n  if (end >= TOTAL_MEMORY) {\\n    var success = enlargeMemory();\\n    if (!success) {\\n      HEAP32[DYNAMICTOP_PTR>>2] = ret;\\n      return 0;\\n    }\\n  }\\n  return ret;\\n}\\n\\nfunction alignMemory(size, factor) {\\n  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default\\n  var ret = size = Math.ceil(size / factor) * factor;\\n  return ret;\\n}\\n\\nfunction getNativeTypeSize(type) {\\n  switch (type) {\\n    case 'i1': case 'i8': return 1;\\n    case 'i16': return 2;\\n    case 'i32': return 4;\\n    case 'i64': return 8;\\n    case 'float': return 4;\\n    case 'double': return 8;\\n    default: {\\n      if (type[type.length-1] === '*') {\\n        return 4; // A pointer\\n      } else if (type[0] === 'i') {\\n        var bits = parseInt(type.substr(1));\\n        assert(bits % 8 === 0);\\n        return bits / 8;\\n      } else {\\n        return 0;\\n      }\\n    }\\n  }\\n}\\n\\nfunction warnOnce(text) {\\n  if (!warnOnce.shown) warnOnce.shown = {};\\n  if (!warnOnce.shown[text]) {\\n    warnOnce.shown[text] = 1;\\n    err(text);\\n  }\\n}\\n\\nvar asm2wasmImports = { // special asm2wasm imports\\n    \\\"f64-rem\\\": function(x, y) {\\n        return x % y;\\n    },\\n    \\\"debugger\\\": function() {\\n        debugger;\\n    }\\n};\\n\\n\\n\\nvar jsCallStartIndex = 1;\\nvar functionPointers = new Array(0);\\n\\n// 'sig' parameter is only used on LLVM wasm backend\\nfunction addFunction(func, sig) {\\n  var base = 0;\\n  for (var i = base; i < base + 0; i++) {\\n    if (!functionPointers[i]) {\\n      functionPointers[i] = func;\\n      return jsCallStartIndex + i;\\n    }\\n  }\\n  throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';\\n}\\n\\nfunction removeFunction(index) {\\n  functionPointers[index-jsCallStartIndex] = null;\\n}\\n\\nvar funcWrappers = {};\\n\\nfunction getFuncWrapper(func, sig) {\\n  if (!func) return; // on null pointer, return undefined\\n  assert(sig);\\n  if (!funcWrappers[sig]) {\\n    funcWrappers[sig] = {};\\n  }\\n  var sigCache = funcWrappers[sig];\\n  if (!sigCache[func]) {\\n    // optimize away arguments usage in common cases\\n    if (sig.length === 1) {\\n      sigCache[func] = function dynCall_wrapper() {\\n        return dynCall(sig, func);\\n      };\\n    } else if (sig.length === 2) {\\n      sigCache[func] = function dynCall_wrapper(arg) {\\n        return dynCall(sig, func, [arg]);\\n      };\\n    } else {\\n      // general case\\n      sigCache[func] = function dynCall_wrapper() {\\n        return dynCall(sig, func, Array.prototype.slice.call(arguments));\\n      };\\n    }\\n  }\\n  return sigCache[func];\\n}\\n\\n\\nfunction makeBigInt(low, high, unsigned) {\\n  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));\\n}\\n\\nfunction dynCall(sig, ptr, args) {\\n  if (args && args.length) {\\n    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));\\n  } else {\\n    return Module['dynCall_' + sig].call(null, ptr);\\n  }\\n}\\n\\n\\n\\nvar Runtime = {\\n  // FIXME backwards compatibility layer for ports. Support some Runtime.*\\n  //       for now, fix it there, then remove it from here. That way we\\n  //       can minimize any period of breakage.\\n  dynCall: dynCall, // for SDL2 port\\n};\\n\\n// The address globals begin at. Very low in memory, for code size and optimization opportunities.\\n// Above 0 is static memory, starting with globals.\\n// Then the stack.\\n// Then 'dynamic' memory for sbrk.\\nvar GLOBAL_BASE = 1024;\\n\\n\\n// === Preamble library stuff ===\\n\\n// Documentation for the public APIs defined in this file must be updated in:\\n//    site/source/docs/api_reference/preamble.js.rst\\n// A prebuilt local version of the documentation is available at:\\n//    site/build/text/docs/api_reference/preamble.js.txt\\n// You can also build docs locally as HTML or other formats in site/\\n// An online HTML version (which may be of a different version of Emscripten)\\n//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html\\n\\n\\n\\n//========================================\\n// Runtime essentials\\n//========================================\\n\\n// whether we are quitting the application. no code should run after this.\\n// set in exit() and abort()\\nvar ABORT = false;\\n\\n// set by exit() and abort().  Passed to 'onExit' handler.\\n// NOTE: This is also used as the process return code code in shell environments\\n// but only when noExitRuntime is false.\\nvar EXITSTATUS = 0;\\n\\n/** @type {function(*, string=)} */\\nfunction assert(condition, text) {\\n  if (!condition) {\\n    abort('Assertion failed: ' + text);\\n  }\\n}\\n\\nvar globalScope = this;\\n\\n// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)\\nfunction getCFunc(ident) {\\n  var func = Module['_' + ident]; // closure exported function\\n  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');\\n  return func;\\n}\\n\\nvar JSfuncs = {\\n  // Helpers for cwrap -- it can't refer to Runtime directly because it might\\n  // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find\\n  // out what the minified function name is.\\n  'stackSave': function() {\\n    stackSave()\\n  },\\n  'stackRestore': function() {\\n    stackRestore()\\n  },\\n  // type conversion from js to c\\n  'arrayToC' : function(arr) {\\n    var ret = stackAlloc(arr.length);\\n    writeArrayToMemory(arr, ret);\\n    return ret;\\n  },\\n  'stringToC' : function(str) {\\n    var ret = 0;\\n    if (str !== null && str !== undefined && str !== 0) { // null string\\n      // at most 4 bytes per UTF-8 code point, +1 for the trailing '\\\\0'\\n      var len = (str.length << 2) + 1;\\n      ret = stackAlloc(len);\\n      stringToUTF8(str, ret, len);\\n    }\\n    return ret;\\n  }\\n};\\n\\n// For fast lookup of conversion functions\\nvar toC = {\\n  'string': JSfuncs['stringToC'], 'array': JSfuncs['arrayToC']\\n};\\n\\n\\n// C calling interface.\\nfunction ccall(ident, returnType, argTypes, args, opts) {\\n  function convertReturnValue(ret) {\\n    if (returnType === 'string') return Pointer_stringify(ret);\\n    if (returnType === 'boolean') return Boolean(ret);\\n    return ret;\\n  }\\n\\n  var func = getCFunc(ident);\\n  var cArgs = [];\\n  var stack = 0;\\n  if (args) {\\n    for (var i = 0; i < args.length; i++) {\\n      var converter = toC[argTypes[i]];\\n      if (converter) {\\n        if (stack === 0) stack = stackSave();\\n        cArgs[i] = converter(args[i]);\\n      } else {\\n        cArgs[i] = args[i];\\n      }\\n    }\\n  }\\n  var ret = func.apply(null, cArgs);\\n  ret = convertReturnValue(ret);\\n  if (stack !== 0) stackRestore(stack);\\n  return ret;\\n}\\n\\nfunction cwrap(ident, returnType, argTypes, opts) {\\n  argTypes = argTypes || [];\\n  // When the function takes numbers and returns a number, we can just return\\n  // the original function\\n  var numericArgs = argTypes.every(function(type){ return type === 'number'});\\n  var numericRet = returnType !== 'string';\\n  if (numericRet && numericArgs && !opts) {\\n    return getCFunc(ident);\\n  }\\n  return function() {\\n    return ccall(ident, returnType, argTypes, arguments, opts);\\n  }\\n}\\n\\n/** @type {function(number, number, string, boolean=)} */\\nfunction setValue(ptr, value, type, noSafe) {\\n  type = type || 'i8';\\n  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit\\n    switch(type) {\\n      case 'i1': HEAP8[((ptr)>>0)]=value; break;\\n      case 'i8': HEAP8[((ptr)>>0)]=value; break;\\n      case 'i16': HEAP16[((ptr)>>1)]=value; break;\\n      case 'i32': HEAP32[((ptr)>>2)]=value; break;\\n      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;\\n      case 'float': HEAPF32[((ptr)>>2)]=value; break;\\n      case 'double': HEAPF64[((ptr)>>3)]=value; break;\\n      default: abort('invalid type for setValue: ' + type);\\n    }\\n}\\n\\n/** @type {function(number, string, boolean=)} */\\nfunction getValue(ptr, type, noSafe) {\\n  type = type || 'i8';\\n  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit\\n    switch(type) {\\n      case 'i1': return HEAP8[((ptr)>>0)];\\n      case 'i8': return HEAP8[((ptr)>>0)];\\n      case 'i16': return HEAP16[((ptr)>>1)];\\n      case 'i32': return HEAP32[((ptr)>>2)];\\n      case 'i64': return HEAP32[((ptr)>>2)];\\n      case 'float': return HEAPF32[((ptr)>>2)];\\n      case 'double': return HEAPF64[((ptr)>>3)];\\n      default: abort('invalid type for getValue: ' + type);\\n    }\\n  return null;\\n}\\n\\nvar ALLOC_NORMAL = 0; // Tries to use _malloc()\\nvar ALLOC_STACK = 1; // Lives for the duration of the current function call\\nvar ALLOC_STATIC = 2; // Cannot be freed\\nvar ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk\\nvar ALLOC_NONE = 4; // Do not allocate\\n\\n// allocate(): This is for internal use. You can use it yourself as well, but the interface\\n//             is a little tricky (see docs right below). The reason is that it is optimized\\n//             for multiple syntaxes to save space in generated code. So you should\\n//             normally not use allocate(), and instead allocate memory using _malloc(),\\n//             initialize it with setValue(), and so forth.\\n// @slab: An array of data, or a number. If a number, then the size of the block to allocate,\\n//        in *bytes* (note that this is sometimes confusing: the next parameter does not\\n//        affect this!)\\n// @types: Either an array of types, one for each byte (or 0 if no type at that position),\\n//         or a single type which is used for the entire block. This only matters if there\\n//         is initial data - if @slab is a number, then this does not matter at all and is\\n//         ignored.\\n// @allocator: How to allocate memory, see ALLOC_*\\n/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */\\nfunction allocate(slab, types, allocator, ptr) {\\n  var zeroinit, size;\\n  if (typeof slab === 'number') {\\n    zeroinit = true;\\n    size = slab;\\n  } else {\\n    zeroinit = false;\\n    size = slab.length;\\n  }\\n\\n  var singleType = typeof types === 'string' ? types : null;\\n\\n  var ret;\\n  if (allocator == ALLOC_NONE) {\\n    ret = ptr;\\n  } else {\\n    ret = [typeof _malloc === 'function' ? _malloc : staticAlloc, stackAlloc, staticAlloc, dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));\\n  }\\n\\n  if (zeroinit) {\\n    var stop;\\n    ptr = ret;\\n    assert((ret & 3) == 0);\\n    stop = ret + (size & ~3);\\n    for (; ptr < stop; ptr += 4) {\\n      HEAP32[((ptr)>>2)]=0;\\n    }\\n    stop = ret + size;\\n    while (ptr < stop) {\\n      HEAP8[((ptr++)>>0)]=0;\\n    }\\n    return ret;\\n  }\\n\\n  if (singleType === 'i8') {\\n    if (slab.subarray || slab.slice) {\\n      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);\\n    } else {\\n      HEAPU8.set(new Uint8Array(slab), ret);\\n    }\\n    return ret;\\n  }\\n\\n  var i = 0, type, typeSize, previousType;\\n  while (i < size) {\\n    var curr = slab[i];\\n\\n    type = singleType || types[i];\\n    if (type === 0) {\\n      i++;\\n      continue;\\n    }\\n\\n    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later\\n\\n    setValue(ret+i, curr, type);\\n\\n    // no need to look up size unless type changes, so cache it\\n    if (previousType !== type) {\\n      typeSize = getNativeTypeSize(type);\\n      previousType = type;\\n    }\\n    i += typeSize;\\n  }\\n\\n  return ret;\\n}\\n\\n// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready\\nfunction getMemory(size) {\\n  if (!staticSealed) return staticAlloc(size);\\n  if (!runtimeInitialized) return dynamicAlloc(size);\\n  return _malloc(size);\\n}\\n\\n/** @type {function(number, number=)} */\\nfunction Pointer_stringify(ptr, length) {\\n  if (length === 0 || !ptr) return '';\\n  // Find the length, and check for UTF while doing so\\n  var hasUtf = 0;\\n  var t;\\n  var i = 0;\\n  while (1) {\\n    t = HEAPU8[(((ptr)+(i))>>0)];\\n    hasUtf |= t;\\n    if (t == 0 && !length) break;\\n    i++;\\n    if (length && i == length) break;\\n  }\\n  if (!length) length = i;\\n\\n  var ret = '';\\n\\n  if (hasUtf < 128) {\\n    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack\\n    var curr;\\n    while (length > 0) {\\n      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));\\n      ret = ret ? ret + curr : curr;\\n      ptr += MAX_CHUNK;\\n      length -= MAX_CHUNK;\\n    }\\n    return ret;\\n  }\\n  return UTF8ToString(ptr);\\n}\\n\\n// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns\\n// a copy of that string as a Javascript String object.\\n\\nfunction AsciiToString(ptr) {\\n  var str = '';\\n  while (1) {\\n    var ch = HEAP8[((ptr++)>>0)];\\n    if (!ch) return str;\\n    str += String.fromCharCode(ch);\\n  }\\n}\\n\\n// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',\\n// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.\\n\\nfunction stringToAscii(str, outPtr) {\\n  return writeAsciiToMemory(str, outPtr, false);\\n}\\n\\n// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns\\n// a copy of that string as a Javascript String object.\\n\\nvar UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;\\nfunction UTF8ArrayToString(u8Array, idx) {\\n  var endPtr = idx;\\n  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.\\n  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.\\n  while (u8Array[endPtr]) ++endPtr;\\n\\n  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {\\n    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));\\n  } else {\\n    var u0, u1, u2, u3, u4, u5;\\n\\n    var str = '';\\n    while (1) {\\n      // For UTF8 byte structure, see:\\n      // http://en.wikipedia.org/wiki/UTF-8#Description\\n      // https://www.ietf.org/rfc/rfc2279.txt\\n      // https://tools.ietf.org/html/rfc3629\\n      u0 = u8Array[idx++];\\n      if (!u0) return str;\\n      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }\\n      u1 = u8Array[idx++] & 63;\\n      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }\\n      u2 = u8Array[idx++] & 63;\\n      if ((u0 & 0xF0) == 0xE0) {\\n        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;\\n      } else {\\n        u3 = u8Array[idx++] & 63;\\n        if ((u0 & 0xF8) == 0xF0) {\\n          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\\n        } else {\\n          u4 = u8Array[idx++] & 63;\\n          if ((u0 & 0xFC) == 0xF8) {\\n            u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;\\n          } else {\\n            u5 = u8Array[idx++] & 63;\\n            u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;\\n          }\\n        }\\n      }\\n      if (u0 < 0x10000) {\\n        str += String.fromCharCode(u0);\\n      } else {\\n        var ch = u0 - 0x10000;\\n        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));\\n      }\\n    }\\n  }\\n}\\n\\n// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns\\n// a copy of that string as a Javascript String object.\\n\\nfunction UTF8ToString(ptr) {\\n  return UTF8ArrayToString(HEAPU8,ptr);\\n}\\n\\n// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',\\n// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.\\n// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.\\n// Parameters:\\n//   str: the Javascript string to copy.\\n//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.\\n//   outIdx: The starting offset in the array to begin the copying.\\n//   maxBytesToWrite: The maximum number of bytes this function can write to the array.\\n//                    This count should include the null terminator,\\n//                    i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.\\n//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.\\n// Returns the number of bytes written, EXCLUDING the null terminator.\\n\\nfunction stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {\\n  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.\\n    return 0;\\n\\n  var startIdx = outIdx;\\n  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.\\n  for (var i = 0; i < str.length; ++i) {\\n    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.\\n    // See http://unicode.org/faq/utf_bom.html#utf16-3\\n    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629\\n    var u = str.charCodeAt(i); // possibly a lead surrogate\\n    if (u >= 0xD800 && u <= 0xDFFF) {\\n      var u1 = str.charCodeAt(++i);\\n      u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);\\n    }\\n    if (u <= 0x7F) {\\n      if (outIdx >= endIdx) break;\\n      outU8Array[outIdx++] = u;\\n    } else if (u <= 0x7FF) {\\n      if (outIdx + 1 >= endIdx) break;\\n      outU8Array[outIdx++] = 0xC0 | (u >> 6);\\n      outU8Array[outIdx++] = 0x80 | (u & 63);\\n    } else if (u <= 0xFFFF) {\\n      if (outIdx + 2 >= endIdx) break;\\n      outU8Array[outIdx++] = 0xE0 | (u >> 12);\\n      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);\\n      outU8Array[outIdx++] = 0x80 | (u & 63);\\n    } else if (u <= 0x1FFFFF) {\\n      if (outIdx + 3 >= endIdx) break;\\n      outU8Array[outIdx++] = 0xF0 | (u >> 18);\\n      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);\\n      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);\\n      outU8Array[outIdx++] = 0x80 | (u & 63);\\n    } else if (u <= 0x3FFFFFF) {\\n      if (outIdx + 4 >= endIdx) break;\\n      outU8Array[outIdx++] = 0xF8 | (u >> 24);\\n      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);\\n      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);\\n      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);\\n      outU8Array[outIdx++] = 0x80 | (u & 63);\\n    } else {\\n      if (outIdx + 5 >= endIdx) break;\\n      outU8Array[outIdx++] = 0xFC | (u >> 30);\\n      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);\\n      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);\\n      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);\\n      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);\\n      outU8Array[outIdx++] = 0x80 | (u & 63);\\n    }\\n  }\\n  // Null-terminate the pointer to the buffer.\\n  outU8Array[outIdx] = 0;\\n  return outIdx - startIdx;\\n}\\n\\n// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',\\n// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.\\n// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.\\n// Returns the number of bytes written, EXCLUDING the null terminator.\\n\\nfunction stringToUTF8(str, outPtr, maxBytesToWrite) {\\n  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);\\n}\\n\\n// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.\\n\\nfunction lengthBytesUTF8(str) {\\n  var len = 0;\\n  for (var i = 0; i < str.length; ++i) {\\n    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.\\n    // See http://unicode.org/faq/utf_bom.html#utf16-3\\n    var u = str.charCodeAt(i); // possibly a lead surrogate\\n    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\\n    if (u <= 0x7F) {\\n      ++len;\\n    } else if (u <= 0x7FF) {\\n      len += 2;\\n    } else if (u <= 0xFFFF) {\\n      len += 3;\\n    } else if (u <= 0x1FFFFF) {\\n      len += 4;\\n    } else if (u <= 0x3FFFFFF) {\\n      len += 5;\\n    } else {\\n      len += 6;\\n    }\\n  }\\n  return len;\\n}\\n\\n// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns\\n// a copy of that string as a Javascript String object.\\n\\nvar UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;\\nfunction UTF16ToString(ptr) {\\n  var endPtr = ptr;\\n  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.\\n  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.\\n  var idx = endPtr >> 1;\\n  while (HEAP16[idx]) ++idx;\\n  endPtr = idx << 1;\\n\\n  if (endPtr - ptr > 32 && UTF16Decoder) {\\n    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));\\n  } else {\\n    var i = 0;\\n\\n    var str = '';\\n    while (1) {\\n      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];\\n      if (codeUnit == 0) return str;\\n      ++i;\\n      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.\\n      str += String.fromCharCode(codeUnit);\\n    }\\n  }\\n}\\n\\n// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',\\n// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.\\n// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.\\n// Parameters:\\n//   str: the Javascript string to copy.\\n//   outPtr: Byte address in Emscripten HEAP where to write the string to.\\n//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null\\n//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.\\n//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.\\n// Returns the number of bytes written, EXCLUDING the null terminator.\\n\\nfunction stringToUTF16(str, outPtr, maxBytesToWrite) {\\n  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.\\n  if (maxBytesToWrite === undefined) {\\n    maxBytesToWrite = 0x7FFFFFFF;\\n  }\\n  if (maxBytesToWrite < 2) return 0;\\n  maxBytesToWrite -= 2; // Null terminator.\\n  var startPtr = outPtr;\\n  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;\\n  for (var i = 0; i < numCharsToWrite; ++i) {\\n    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.\\n    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate\\n    HEAP16[((outPtr)>>1)]=codeUnit;\\n    outPtr += 2;\\n  }\\n  // Null-terminate the pointer to the HEAP.\\n  HEAP16[((outPtr)>>1)]=0;\\n  return outPtr - startPtr;\\n}\\n\\n// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.\\n\\nfunction lengthBytesUTF16(str) {\\n  return str.length*2;\\n}\\n\\nfunction UTF32ToString(ptr) {\\n  var i = 0;\\n\\n  var str = '';\\n  while (1) {\\n    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];\\n    if (utf32 == 0)\\n      return str;\\n    ++i;\\n    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.\\n    // See http://unicode.org/faq/utf_bom.html#utf16-3\\n    if (utf32 >= 0x10000) {\\n      var ch = utf32 - 0x10000;\\n      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));\\n    } else {\\n      str += String.fromCharCode(utf32);\\n    }\\n  }\\n}\\n\\n// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',\\n// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.\\n// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.\\n// Parameters:\\n//   str: the Javascript string to copy.\\n//   outPtr: Byte address in Emscripten HEAP where to write the string to.\\n//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null\\n//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.\\n//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.\\n// Returns the number of bytes written, EXCLUDING the null terminator.\\n\\nfunction stringToUTF32(str, outPtr, maxBytesToWrite) {\\n  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.\\n  if (maxBytesToWrite === undefined) {\\n    maxBytesToWrite = 0x7FFFFFFF;\\n  }\\n  if (maxBytesToWrite < 4) return 0;\\n  var startPtr = outPtr;\\n  var endPtr = startPtr + maxBytesToWrite - 4;\\n  for (var i = 0; i < str.length; ++i) {\\n    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.\\n    // See http://unicode.org/faq/utf_bom.html#utf16-3\\n    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate\\n    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {\\n      var trailSurrogate = str.charCodeAt(++i);\\n      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);\\n    }\\n    HEAP32[((outPtr)>>2)]=codeUnit;\\n    outPtr += 4;\\n    if (outPtr + 4 > endPtr) break;\\n  }\\n  // Null-terminate the pointer to the HEAP.\\n  HEAP32[((outPtr)>>2)]=0;\\n  return outPtr - startPtr;\\n}\\n\\n// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.\\n\\nfunction lengthBytesUTF32(str) {\\n  var len = 0;\\n  for (var i = 0; i < str.length; ++i) {\\n    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.\\n    // See http://unicode.org/faq/utf_bom.html#utf16-3\\n    var codeUnit = str.charCodeAt(i);\\n    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.\\n    len += 4;\\n  }\\n\\n  return len;\\n}\\n\\n// Allocate heap space for a JS string, and write it there.\\n// It is the responsibility of the caller to free() that memory.\\nfunction allocateUTF8(str) {\\n  var size = lengthBytesUTF8(str) + 1;\\n  var ret = _malloc(size);\\n  if (ret) stringToUTF8Array(str, HEAP8, ret, size);\\n  return ret;\\n}\\n\\n// Allocate stack space for a JS string, and write it there.\\nfunction allocateUTF8OnStack(str) {\\n  var size = lengthBytesUTF8(str) + 1;\\n  var ret = stackAlloc(size);\\n  stringToUTF8Array(str, HEAP8, ret, size);\\n  return ret;\\n}\\n\\nfunction demangle(func) {\\n  return func;\\n}\\n\\nfunction demangleAll(text) {\\n  var regex =\\n    /__Z[\\\\w\\\\d_]+/g;\\n  return text.replace(regex,\\n    function(x) {\\n      var y = demangle(x);\\n      return x === y ? x : (y + ' [' + x + ']');\\n    });\\n}\\n\\nfunction jsStackTrace() {\\n  var err = new Error();\\n  if (!err.stack) {\\n    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,\\n    // so try that as a special-case.\\n    try {\\n      throw new Error(0);\\n    } catch(e) {\\n      err = e;\\n    }\\n    if (!err.stack) {\\n      return '(no stack trace available)';\\n    }\\n  }\\n  return err.stack.toString();\\n}\\n\\nfunction stackTrace() {\\n  var js = jsStackTrace();\\n  if (Module['extraStackTrace']) js += '\\\\n' + Module['extraStackTrace']();\\n  return demangleAll(js);\\n}\\n\\n// Memory management\\n\\nvar PAGE_SIZE = 16384;\\nvar WASM_PAGE_SIZE = 65536;\\nvar ASMJS_PAGE_SIZE = 16777216;\\nvar MIN_TOTAL_MEMORY = 16777216;\\n\\nfunction alignUp(x, multiple) {\\n  if (x % multiple > 0) {\\n    x += multiple - (x % multiple);\\n  }\\n  return x;\\n}\\n\\nvar HEAP,\\n/** @type {ArrayBuffer} */\\n  buffer,\\n/** @type {Int8Array} */\\n  HEAP8,\\n/** @type {Uint8Array} */\\n  HEAPU8,\\n/** @type {Int16Array} */\\n  HEAP16,\\n/** @type {Uint16Array} */\\n  HEAPU16,\\n/** @type {Int32Array} */\\n  HEAP32,\\n/** @type {Uint32Array} */\\n  HEAPU32,\\n/** @type {Float32Array} */\\n  HEAPF32,\\n/** @type {Float64Array} */\\n  HEAPF64;\\n\\nfunction updateGlobalBuffer(buf) {\\n  Module['buffer'] = buffer = buf;\\n}\\n\\nfunction updateGlobalBufferViews() {\\n  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);\\n  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);\\n  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);\\n  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);\\n  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);\\n  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);\\n  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);\\n  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);\\n}\\n\\nvar STATIC_BASE, STATICTOP, staticSealed; // static area\\nvar STACK_BASE, STACKTOP, STACK_MAX; // stack area\\nvar DYNAMIC_BASE, DYNAMICTOP_PTR; // dynamic area handled by sbrk\\n\\n  STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;\\n  staticSealed = false;\\n\\n\\n\\n\\nfunction abortOnCannotGrowMemory() {\\n  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime, or (3) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');\\n}\\n\\n\\nfunction enlargeMemory() {\\n  abortOnCannotGrowMemory();\\n}\\n\\n\\nvar TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;\\nvar TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;\\nif (TOTAL_MEMORY < TOTAL_STACK) err('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');\\n\\n// Initialize the runtime's memory\\n\\n\\n\\n// Use a provided buffer, if there is one, or else allocate a new one\\nif (Module['buffer']) {\\n  buffer = Module['buffer'];\\n} else {\\n  // Use a WebAssembly memory where available\\n  if (typeof WebAssembly === 'object' && typeof WebAssembly.Memory === 'function') {\\n    Module['wasmMemory'] = new WebAssembly.Memory({ 'initial': TOTAL_MEMORY / WASM_PAGE_SIZE, 'maximum': TOTAL_MEMORY / WASM_PAGE_SIZE });\\n    buffer = Module['wasmMemory'].buffer;\\n  } else\\n  {\\n    buffer = new ArrayBuffer(TOTAL_MEMORY);\\n  }\\n  Module['buffer'] = buffer;\\n}\\nupdateGlobalBufferViews();\\n\\n\\nfunction getTotalMemory() {\\n  return TOTAL_MEMORY;\\n}\\n\\n// Endianness check (note: assumes compiler arch was little-endian)\\n\\nfunction callRuntimeCallbacks(callbacks) {\\n  while(callbacks.length > 0) {\\n    var callback = callbacks.shift();\\n    if (typeof callback == 'function') {\\n      callback();\\n      continue;\\n    }\\n    var func = callback.func;\\n    if (typeof func === 'number') {\\n      if (callback.arg === undefined) {\\n        Module['dynCall_v'](func);\\n      } else {\\n        Module['dynCall_vi'](func, callback.arg);\\n      }\\n    } else {\\n      func(callback.arg === undefined ? null : callback.arg);\\n    }\\n  }\\n}\\n\\nvar __ATPRERUN__  = []; // functions called before the runtime is initialized\\nvar __ATINIT__    = []; // functions called during startup\\nvar __ATMAIN__    = []; // functions called when main() is to be run\\nvar __ATEXIT__    = []; // functions called during shutdown\\nvar __ATPOSTRUN__ = []; // functions called after the main() is called\\n\\nvar runtimeInitialized = false;\\nvar runtimeExited = false;\\n\\n\\nfunction preRun() {\\n  // compatibility - merge in anything from Module['preRun'] at this time\\n  if (Module['preRun']) {\\n    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];\\n    while (Module['preRun'].length) {\\n      addOnPreRun(Module['preRun'].shift());\\n    }\\n  }\\n  callRuntimeCallbacks(__ATPRERUN__);\\n}\\n\\nfunction ensureInitRuntime() {\\n  if (runtimeInitialized) return;\\n  runtimeInitialized = true;\\n  callRuntimeCallbacks(__ATINIT__);\\n}\\n\\nfunction preMain() {\\n  callRuntimeCallbacks(__ATMAIN__);\\n}\\n\\nfunction exitRuntime() {\\n  callRuntimeCallbacks(__ATEXIT__);\\n  runtimeExited = true;\\n}\\n\\nfunction postRun() {\\n  // compatibility - merge in anything from Module['postRun'] at this time\\n  if (Module['postRun']) {\\n    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];\\n    while (Module['postRun'].length) {\\n      addOnPostRun(Module['postRun'].shift());\\n    }\\n  }\\n  callRuntimeCallbacks(__ATPOSTRUN__);\\n}\\n\\nfunction addOnPreRun(cb) {\\n  __ATPRERUN__.unshift(cb);\\n}\\n\\nfunction addOnInit(cb) {\\n  __ATINIT__.unshift(cb);\\n}\\n\\nfunction addOnPreMain(cb) {\\n  __ATMAIN__.unshift(cb);\\n}\\n\\nfunction addOnExit(cb) {\\n  __ATEXIT__.unshift(cb);\\n}\\n\\nfunction addOnPostRun(cb) {\\n  __ATPOSTRUN__.unshift(cb);\\n}\\n\\n// Deprecated: This function should not be called because it is unsafe and does not provide\\n// a maximum length limit of how many bytes it is allowed to write. Prefer calling the\\n// function stringToUTF8Array() instead, which takes in a maximum length that can be used\\n// to be secure from out of bounds writes.\\n/** @deprecated */\\nfunction writeStringToMemory(string, buffer, dontAddNull) {\\n  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');\\n\\n  var /** @type {number} */ lastChar, /** @type {number} */ end;\\n  if (dontAddNull) {\\n    // stringToUTF8Array always appends null. If we don't want to do that, remember the\\n    // character that existed at the location where the null will be placed, and restore\\n    // that after the write (below).\\n    end = buffer + lengthBytesUTF8(string);\\n    lastChar = HEAP8[end];\\n  }\\n  stringToUTF8(string, buffer, Infinity);\\n  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.\\n}\\n\\nfunction writeArrayToMemory(array, buffer) {\\n  HEAP8.set(array, buffer);\\n}\\n\\nfunction writeAsciiToMemory(str, buffer, dontAddNull) {\\n  for (var i = 0; i < str.length; ++i) {\\n    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);\\n  }\\n  // Null-terminate the pointer to the HEAP.\\n  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;\\n}\\n\\nfunction unSign(value, bits, ignore) {\\n  if (value >= 0) {\\n    return value;\\n  }\\n  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts\\n                    : Math.pow(2, bits)         + value;\\n}\\nfunction reSign(value, bits, ignore) {\\n  if (value <= 0) {\\n    return value;\\n  }\\n  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32\\n                        : Math.pow(2, bits-1);\\n  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that\\n                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors\\n                                                       // TODO: In i64 mode 1, resign the two parts separately and safely\\n    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts\\n  }\\n  return value;\\n}\\n\\n\\nvar Math_abs = Math.abs;\\nvar Math_cos = Math.cos;\\nvar Math_sin = Math.sin;\\nvar Math_tan = Math.tan;\\nvar Math_acos = Math.acos;\\nvar Math_asin = Math.asin;\\nvar Math_atan = Math.atan;\\nvar Math_atan2 = Math.atan2;\\nvar Math_exp = Math.exp;\\nvar Math_log = Math.log;\\nvar Math_sqrt = Math.sqrt;\\nvar Math_ceil = Math.ceil;\\nvar Math_floor = Math.floor;\\nvar Math_pow = Math.pow;\\nvar Math_imul = Math.imul;\\nvar Math_fround = Math.fround;\\nvar Math_round = Math.round;\\nvar Math_min = Math.min;\\nvar Math_max = Math.max;\\nvar Math_clz32 = Math.clz32;\\nvar Math_trunc = Math.trunc;\\n\\n// A counter of dependencies for calling run(). If we need to\\n// do asynchronous work before running, increment this and\\n// decrement it. Incrementing must happen in a place like\\n// Module.preRun (used by emcc to add file preloading).\\n// Note that you can add dependencies in preRun, even though\\n// it happens right before run - run will be postponed until\\n// the dependencies are met.\\nvar runDependencies = 0;\\nvar runDependencyWatcher = null;\\nvar dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled\\n\\nfunction getUniqueRunDependency(id) {\\n  return id;\\n}\\n\\nfunction addRunDependency(id) {\\n  runDependencies++;\\n  if (Module['monitorRunDependencies']) {\\n    Module['monitorRunDependencies'](runDependencies);\\n  }\\n}\\n\\nfunction removeRunDependency(id) {\\n  runDependencies--;\\n  if (Module['monitorRunDependencies']) {\\n    Module['monitorRunDependencies'](runDependencies);\\n  }\\n  if (runDependencies == 0) {\\n    if (runDependencyWatcher !== null) {\\n      clearInterval(runDependencyWatcher);\\n      runDependencyWatcher = null;\\n    }\\n    if (dependenciesFulfilled) {\\n      var callback = dependenciesFulfilled;\\n      dependenciesFulfilled = null;\\n      callback(); // can add another dependenciesFulfilled\\n    }\\n  }\\n}\\n\\nModule[\\\"preloadedImages\\\"] = {}; // maps url to image data\\nModule[\\\"preloadedAudios\\\"] = {}; // maps url to audio data\\n\\n\\n\\nvar memoryInitializer = null;\\n\\n\\n\\n\\n\\n\\n// Copyright 2017 The Emscripten Authors.  All rights reserved.\\n// Emscripten is available under two separate licenses, the MIT license and the\\n// University of Illinois/NCSA Open Source License.  Both these licenses can be\\n// found in the LICENSE file.\\n\\n// Prefix of data URIs emitted by SINGLE_FILE and related options.\\nvar dataURIPrefix = 'data:application/octet-stream;base64,';\\n\\n// Indicates whether filename is a base64 data URI.\\nfunction isDataURI(filename) {\\n  return String.prototype.startsWith ?\\n      filename.startsWith(dataURIPrefix) :\\n      filename.indexOf(dataURIPrefix) === 0;\\n}\\n\\n\\n\\n\\nfunction integrateWasmJS() {\\n  // wasm.js has several methods for creating the compiled code module here:\\n  //  * 'native-wasm' : use native WebAssembly support in the browser\\n  //  * 'interpret-s-expr': load s-expression code from a .wast and interpret\\n  //  * 'interpret-binary': load binary wasm and interpret\\n  //  * 'interpret-asm2wasm': load asm.js code, translate to wasm, and interpret\\n  //  * 'asmjs': no wasm, just load the asm.js code and use that (good for testing)\\n  // The method is set at compile time (BINARYEN_METHOD)\\n  // The method can be a comma-separated list, in which case, we will try the\\n  // options one by one. Some of them can fail gracefully, and then we can try\\n  // the next.\\n\\n  // inputs\\n\\n  var method = 'native-wasm';\\n\\n  var wasmTextFile = 'fast-sound.wast';\\n  var wasmBinaryFile = 'fast-sound.wasm';\\n  var asmjsCodeFile = 'fast-sound.temp.asm.js';\\n\\n  if (!isDataURI(wasmTextFile)) {\\n    wasmTextFile = locateFile(wasmTextFile);\\n  }\\n  if (!isDataURI(wasmBinaryFile)) {\\n    wasmBinaryFile = locateFile(wasmBinaryFile);\\n  }\\n  if (!isDataURI(asmjsCodeFile)) {\\n    asmjsCodeFile = locateFile(asmjsCodeFile);\\n  }\\n\\n  // utilities\\n\\n  var wasmPageSize = 64*1024;\\n\\n  var info = {\\n    'global': null,\\n    'env': null,\\n    'asm2wasm': asm2wasmImports,\\n    'parent': Module // Module inside wasm-js.cpp refers to wasm-js.cpp; this allows access to the outside program.\\n  };\\n\\n  var exports = null;\\n\\n\\n  function mergeMemory(newBuffer) {\\n    // The wasm instance creates its memory. But static init code might have written to\\n    // buffer already, including the mem init file, and we must copy it over in a proper merge.\\n    // TODO: avoid this copy, by avoiding such static init writes\\n    // TODO: in shorter term, just copy up to the last static init write\\n    var oldBuffer = Module['buffer'];\\n    if (newBuffer.byteLength < oldBuffer.byteLength) {\\n      err('the new buffer in mergeMemory is smaller than the previous one. in native wasm, we should grow memory here');\\n    }\\n    var oldView = new Int8Array(oldBuffer);\\n    var newView = new Int8Array(newBuffer);\\n\\n\\n    newView.set(oldView);\\n    updateGlobalBuffer(newBuffer);\\n    updateGlobalBufferViews();\\n  }\\n\\n  function fixImports(imports) {\\n    return imports;\\n  }\\n\\n  function getBinary() {\\n    try {\\n      if (Module['wasmBinary']) {\\n        return new Uint8Array(Module['wasmBinary']);\\n      }\\n      if (Module['readBinary']) {\\n        return Module['readBinary'](wasmBinaryFile);\\n      } else {\\n        throw \\\"both async and sync fetching of the wasm failed\\\";\\n      }\\n    }\\n    catch (err) {\\n      abort(err);\\n    }\\n  }\\n\\n  function getBinaryPromise() {\\n    // if we don't have the binary yet, and have the Fetch api, use that\\n    // in some environments, like Electron's render process, Fetch api may be present, but have a different context than expected, let's only use it on the Web\\n    if (!Module['wasmBinary'] && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) && typeof fetch === 'function') {\\n      return fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(function(response) {\\n        if (!response['ok']) {\\n          throw \\\"failed to load wasm binary file at '\\\" + wasmBinaryFile + \\\"'\\\";\\n        }\\n        return response['arrayBuffer']();\\n      }).catch(function () {\\n        return getBinary();\\n      });\\n    }\\n    // Otherwise, getBinary should be able to get it synchronously\\n    return new Promise(function(resolve, reject) {\\n      resolve(getBinary());\\n    });\\n  }\\n\\n  // do-method functions\\n\\n\\n  function doNativeWasm(global, env, providedBuffer) {\\n    if (typeof WebAssembly !== 'object') {\\n      err('no native wasm support detected');\\n      return false;\\n    }\\n    // prepare memory import\\n    if (!(Module['wasmMemory'] instanceof WebAssembly.Memory)) {\\n      err('no native wasm Memory in use');\\n      return false;\\n    }\\n    env['memory'] = Module['wasmMemory'];\\n    // Load the wasm module and create an instance of using native support in the JS engine.\\n    info['global'] = {\\n      'NaN': NaN,\\n      'Infinity': Infinity\\n    };\\n    info['global.Math'] = Math;\\n    info['env'] = env;\\n    // handle a generated wasm instance, receiving its exports and\\n    // performing other necessary setup\\n    function receiveInstance(instance, module) {\\n      exports = instance.exports;\\n      if (exports.memory) mergeMemory(exports.memory);\\n      Module['asm'] = exports;\\n      Module[\\\"usingWasm\\\"] = true;\\n      removeRunDependency('wasm-instantiate');\\n    }\\n    addRunDependency('wasm-instantiate');\\n\\n    // User shell pages can write their own Module.instantiateWasm = function(imports, successCallback) callback\\n    // to manually instantiate the Wasm module themselves. This allows pages to run the instantiation parallel\\n    // to any other async startup actions they are performing.\\n    if (Module['instantiateWasm']) {\\n      try {\\n        return Module['instantiateWasm'](info, receiveInstance);\\n      } catch(e) {\\n        err('Module.instantiateWasm callback failed with error: ' + e);\\n        return false;\\n      }\\n    }\\n\\n    function receiveInstantiatedSource(output) {\\n      // 'output' is a WebAssemblyInstantiatedSource object which has both the module and instance.\\n      // receiveInstance() will swap in the exports (to Module.asm) so they can be called\\n      receiveInstance(output['instance'], output['module']);\\n    }\\n    function instantiateArrayBuffer(receiver) {\\n      getBinaryPromise().then(function(binary) {\\n        return WebAssembly.instantiate(binary, info);\\n      }).then(receiver, function(reason) {\\n        err('failed to asynchronously prepare wasm: ' + reason);\\n        abort(reason);\\n      });\\n    }\\n    // Prefer streaming instantiation if available.\\n    if (!Module['wasmBinary'] &&\\n        typeof WebAssembly.instantiateStreaming === 'function' &&\\n        !isDataURI(wasmBinaryFile) &&\\n        typeof fetch === 'function') {\\n      WebAssembly.instantiateStreaming(fetch(wasmBinaryFile, { credentials: 'same-origin' }), info)\\n        .then(receiveInstantiatedSource, function(reason) {\\n          // We expect the most common failure cause to be a bad MIME type for the binary,\\n          // in which case falling back to ArrayBuffer instantiation should work.\\n          err('wasm streaming compile failed: ' + reason);\\n          err('falling back to ArrayBuffer instantiation');\\n          instantiateArrayBuffer(receiveInstantiatedSource);\\n        });\\n    } else {\\n      instantiateArrayBuffer(receiveInstantiatedSource);\\n    }\\n    return {}; // no exports yet; we'll fill them in later\\n  }\\n\\n\\n  // We may have a preloaded value in Module.asm, save it\\n  Module['asmPreload'] = Module['asm'];\\n\\n  // Memory growth integration code\\n\\n  var asmjsReallocBuffer = Module['reallocBuffer'];\\n\\n  var wasmReallocBuffer = function(size) {\\n    var PAGE_MULTIPLE = Module[\\\"usingWasm\\\"] ? WASM_PAGE_SIZE : ASMJS_PAGE_SIZE; // In wasm, heap size must be a multiple of 64KB. In asm.js, they need to be multiples of 16MB.\\n    size = alignUp(size, PAGE_MULTIPLE); // round up to wasm page size\\n    var old = Module['buffer'];\\n    var oldSize = old.byteLength;\\n    if (Module[\\\"usingWasm\\\"]) {\\n      // native wasm support\\n      try {\\n        var result = Module['wasmMemory'].grow((size - oldSize) / wasmPageSize); // .grow() takes a delta compared to the previous size\\n        if (result !== (-1 | 0)) {\\n          // success in native wasm memory growth, get the buffer from the memory\\n          return Module['buffer'] = Module['wasmMemory'].buffer;\\n        } else {\\n          return null;\\n        }\\n      } catch(e) {\\n        return null;\\n      }\\n    }\\n  };\\n\\n  Module['reallocBuffer'] = function(size) {\\n    if (finalMethod === 'asmjs') {\\n      return asmjsReallocBuffer(size);\\n    } else {\\n      return wasmReallocBuffer(size);\\n    }\\n  };\\n\\n  // we may try more than one; this is the final one, that worked and we are using\\n  var finalMethod = '';\\n\\n  // Provide an \\\"asm.js function\\\" for the application, called to \\\"link\\\" the asm.js module. We instantiate\\n  // the wasm module at that time, and it receives imports and provides exports and so forth, the app\\n  // doesn't need to care that it is wasm or olyfilled wasm or asm.js.\\n\\n  Module['asm'] = function(global, env, providedBuffer) {\\n    env = fixImports(env);\\n\\n    // import table\\n    if (!env['table']) {\\n      var TABLE_SIZE = Module['wasmTableSize'];\\n      if (TABLE_SIZE === undefined) TABLE_SIZE = 1024; // works in binaryen interpreter at least\\n      var MAX_TABLE_SIZE = Module['wasmMaxTableSize'];\\n      if (typeof WebAssembly === 'object' && typeof WebAssembly.Table === 'function') {\\n        if (MAX_TABLE_SIZE !== undefined) {\\n          env['table'] = new WebAssembly.Table({ 'initial': TABLE_SIZE, 'maximum': MAX_TABLE_SIZE, 'element': 'anyfunc' });\\n        } else {\\n          env['table'] = new WebAssembly.Table({ 'initial': TABLE_SIZE, element: 'anyfunc' });\\n        }\\n      } else {\\n        env['table'] = new Array(TABLE_SIZE); // works in binaryen interpreter at least\\n      }\\n      Module['wasmTable'] = env['table'];\\n    }\\n\\n    if (!env['memoryBase']) {\\n      env['memoryBase'] = Module['STATIC_BASE']; // tell the memory segments where to place themselves\\n    }\\n    if (!env['tableBase']) {\\n      env['tableBase'] = 0; // table starts at 0 by default, in dynamic linking this will change\\n    }\\n\\n    // try the methods. each should return the exports if it succeeded\\n\\n    var exports;\\n    exports = doNativeWasm(global, env, providedBuffer);\\n\\n    assert(exports, 'no binaryen method succeeded.');\\n\\n\\n    return exports;\\n  };\\n\\n  var methodHandler = Module['asm']; // note our method handler, as we may modify Module['asm'] later\\n}\\n\\nintegrateWasmJS();\\n\\n// === Body ===\\n\\nvar ASM_CONSTS = [];\\n\\n\\n\\n\\n\\nSTATIC_BASE = GLOBAL_BASE;\\n\\nSTATICTOP = STATIC_BASE + 52064;\\n/* global initializers */  __ATINIT__.push();\\n\\n\\n\\n\\n\\n\\n\\nvar STATIC_BUMP = 52064;\\nModule[\\\"STATIC_BASE\\\"] = STATIC_BASE;\\nModule[\\\"STATIC_BUMP\\\"] = STATIC_BUMP;\\n\\n/* no memory initializer */\\nvar tempDoublePtr = STATICTOP; STATICTOP += 16;\\n\\nfunction copyTempFloat(ptr) { // functions, because inlining this code increases code size too much\\n\\n  HEAP8[tempDoublePtr] = HEAP8[ptr];\\n\\n  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];\\n\\n  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];\\n\\n  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];\\n\\n}\\n\\nfunction copyTempDouble(ptr) {\\n\\n  HEAP8[tempDoublePtr] = HEAP8[ptr];\\n\\n  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];\\n\\n  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];\\n\\n  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];\\n\\n  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];\\n\\n  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];\\n\\n  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];\\n\\n  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];\\n\\n}\\n\\n// {{PRE_LIBRARY}}\\n\\n\\n  \\n  var SYSCALLS={varargs:0,get:function (varargs) {\\n        SYSCALLS.varargs += 4;\\n        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];\\n        return ret;\\n      },getStr:function () {\\n        var ret = Pointer_stringify(SYSCALLS.get());\\n        return ret;\\n      },get64:function () {\\n        var low = SYSCALLS.get(), high = SYSCALLS.get();\\n        if (low >= 0) assert(high === 0);\\n        else assert(high === -1);\\n        return low;\\n      },getZero:function () {\\n        assert(SYSCALLS.get() === 0);\\n      }};function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;\\n  try {\\n   // llseek\\n      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();\\n      // NOTE: offset_high is unused - Emscripten's off_t is 32-bit\\n      var offset = offset_low;\\n      FS.llseek(stream, offset, whence);\\n      HEAP32[((result)>>2)]=stream.position;\\n      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state\\n      return 0;\\n    } catch (e) {\\n    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);\\n    return -e.errno;\\n  }\\n  }\\n\\n  \\n  function flush_NO_FILESYSTEM() {\\n      // flush anything remaining in the buffers during shutdown\\n      var fflush = Module[\\\"_fflush\\\"];\\n      if (fflush) fflush(0);\\n      var printChar = ___syscall146.printChar;\\n      if (!printChar) return;\\n      var buffers = ___syscall146.buffers;\\n      if (buffers[1].length) printChar(1, 10);\\n      if (buffers[2].length) printChar(2, 10);\\n    }function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;\\n  try {\\n   // writev\\n      // hack to support printf in FILESYSTEM=0\\n      var stream = SYSCALLS.get(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();\\n      var ret = 0;\\n      if (!___syscall146.buffers) {\\n        ___syscall146.buffers = [null, [], []]; // 1 => stdout, 2 => stderr\\n        ___syscall146.printChar = function(stream, curr) {\\n          var buffer = ___syscall146.buffers[stream];\\n          assert(buffer);\\n          if (curr === 0 || curr === 10) {\\n            (stream === 1 ? out : err)(UTF8ArrayToString(buffer, 0));\\n            buffer.length = 0;\\n          } else {\\n            buffer.push(curr);\\n          }\\n        };\\n      }\\n      for (var i = 0; i < iovcnt; i++) {\\n        var ptr = HEAP32[(((iov)+(i*8))>>2)];\\n        var len = HEAP32[(((iov)+(i*8 + 4))>>2)];\\n        for (var j = 0; j < len; j++) {\\n          ___syscall146.printChar(stream, HEAPU8[ptr+j]);\\n        }\\n        ret += len;\\n      }\\n      return ret;\\n    } catch (e) {\\n    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);\\n    return -e.errno;\\n  }\\n  }\\n\\n  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;\\n  try {\\n   // close\\n      var stream = SYSCALLS.getStreamFromFD();\\n      FS.close(stream);\\n      return 0;\\n    } catch (e) {\\n    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);\\n    return -e.errno;\\n  }\\n  }\\n\\n  function _abort() {\\n      Module['abort']();\\n    }\\n\\n   \\n\\n  var _llvm_cos_f64=Math_cos;\\n\\n  var _llvm_ctlz_i32=true;\\n\\n  \\n  function _llvm_exp2_f32(x) {\\n      return Math.pow(2, x);\\n    }function _llvm_exp2_f64() {\\n  return _llvm_exp2_f32.apply(null, arguments)\\n  }\\n\\n  var _llvm_exp_f64=Math_exp;\\n\\n  var _llvm_fabs_f32=Math_abs;\\n\\n  var _llvm_floor_f32=Math_floor;\\n\\n  var _llvm_floor_f64=Math_floor;\\n\\n  \\n  function _llvm_log10_f32(x) {\\n      return Math.log(x) / Math.LN10; // TODO: Math.log10, when browser support is there\\n    }function _llvm_log10_f64() {\\n  return _llvm_log10_f32.apply(null, arguments)\\n  }\\n\\n  var _llvm_log_f64=Math_log;\\n\\n  var _llvm_sin_f64=Math_sin;\\n\\n  var _llvm_sqrt_f32=Math_sqrt;\\n\\n  var _llvm_sqrt_f64=Math_sqrt;\\n\\n  function _llvm_stackrestore(p) {\\n      var self = _llvm_stacksave;\\n      var ret = self.LLVM_SAVEDSTACKS[p];\\n      self.LLVM_SAVEDSTACKS.splice(p, 1);\\n      stackRestore(ret);\\n    }\\n\\n  function _llvm_stacksave() {\\n      var self = _llvm_stacksave;\\n      if (!self.LLVM_SAVEDSTACKS) {\\n        self.LLVM_SAVEDSTACKS = [];\\n      }\\n      self.LLVM_SAVEDSTACKS.push(stackSave());\\n      return self.LLVM_SAVEDSTACKS.length-1;\\n    }\\n\\n  \\n  function _emscripten_memcpy_big(dest, src, num) {\\n      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);\\n      return dest;\\n    } \\n\\n   \\n\\n   \\n\\n  \\n    \\n\\n  \\n  function ___setErrNo(value) {\\n      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;\\n      return value;\\n    } \\nDYNAMICTOP_PTR = staticAlloc(4);\\n\\nSTACK_BASE = STACKTOP = alignMemory(STATICTOP);\\n\\nSTACK_MAX = STACK_BASE + TOTAL_STACK;\\n\\nDYNAMIC_BASE = alignMemory(STACK_MAX);\\n\\nHEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;\\n\\nstaticSealed = true; // seal the static portion of memory\\n\\nvar ASSERTIONS = false;\\n\\n// Copyright 2017 The Emscripten Authors.  All rights reserved.\\n// Emscripten is available under two separate licenses, the MIT license and the\\n// University of Illinois/NCSA Open Source License.  Both these licenses can be\\n// found in the LICENSE file.\\n\\n/** @type {function(string, boolean=, number=)} */\\nfunction intArrayFromString(stringy, dontAddNull, length) {\\n  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;\\n  var u8array = new Array(len);\\n  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);\\n  if (dontAddNull) u8array.length = numBytesWritten;\\n  return u8array;\\n}\\n\\nfunction intArrayToString(array) {\\n  var ret = [];\\n  for (var i = 0; i < array.length; i++) {\\n    var chr = array[i];\\n    if (chr > 0xFF) {\\n      if (ASSERTIONS) {\\n        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');\\n      }\\n      chr &= 0xFF;\\n    }\\n    ret.push(String.fromCharCode(chr));\\n  }\\n  return ret.join('');\\n}\\n\\n\\n\\nModule['wasmTableSize'] = 16;\\n\\nModule['wasmMaxTableSize'] = 16;\\n\\nfunction invoke_ii(index,a1) {\\n  var sp = stackSave();\\n  try {\\n    return Module[\\\"dynCall_ii\\\"](index,a1);\\n  } catch(e) {\\n    stackRestore(sp);\\n    if (typeof e !== 'number' && e !== 'longjmp') throw e;\\n    Module[\\\"setThrew\\\"](1, 0);\\n  }\\n}\\n\\nfunction invoke_iiii(index,a1,a2,a3) {\\n  var sp = stackSave();\\n  try {\\n    return Module[\\\"dynCall_iiii\\\"](index,a1,a2,a3);\\n  } catch(e) {\\n    stackRestore(sp);\\n    if (typeof e !== 'number' && e !== 'longjmp') throw e;\\n    Module[\\\"setThrew\\\"](1, 0);\\n  }\\n}\\n\\nfunction invoke_iiiiiii(index,a1,a2,a3,a4,a5,a6) {\\n  var sp = stackSave();\\n  try {\\n    return Module[\\\"dynCall_iiiiiii\\\"](index,a1,a2,a3,a4,a5,a6);\\n  } catch(e) {\\n    stackRestore(sp);\\n    if (typeof e !== 'number' && e !== 'longjmp') throw e;\\n    Module[\\\"setThrew\\\"](1, 0);\\n  }\\n}\\n\\nfunction invoke_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {\\n  var sp = stackSave();\\n  try {\\n    Module[\\\"dynCall_viiiiiii\\\"](index,a1,a2,a3,a4,a5,a6,a7);\\n  } catch(e) {\\n    stackRestore(sp);\\n    if (typeof e !== 'number' && e !== 'longjmp') throw e;\\n    Module[\\\"setThrew\\\"](1, 0);\\n  }\\n}\\n\\nModule.asmGlobalArg = {};\\n\\nModule.asmLibraryArg = { \\\"abort\\\": abort, \\\"assert\\\": assert, \\\"enlargeMemory\\\": enlargeMemory, \\\"getTotalMemory\\\": getTotalMemory, \\\"abortOnCannotGrowMemory\\\": abortOnCannotGrowMemory, \\\"invoke_ii\\\": invoke_ii, \\\"invoke_iiii\\\": invoke_iiii, \\\"invoke_iiiiiii\\\": invoke_iiiiiii, \\\"invoke_viiiiiii\\\": invoke_viiiiiii, \\\"___setErrNo\\\": ___setErrNo, \\\"___syscall140\\\": ___syscall140, \\\"___syscall146\\\": ___syscall146, \\\"___syscall6\\\": ___syscall6, \\\"_abort\\\": _abort, \\\"_emscripten_memcpy_big\\\": _emscripten_memcpy_big, \\\"_llvm_cos_f64\\\": _llvm_cos_f64, \\\"_llvm_exp2_f32\\\": _llvm_exp2_f32, \\\"_llvm_exp2_f64\\\": _llvm_exp2_f64, \\\"_llvm_exp_f64\\\": _llvm_exp_f64, \\\"_llvm_fabs_f32\\\": _llvm_fabs_f32, \\\"_llvm_floor_f32\\\": _llvm_floor_f32, \\\"_llvm_floor_f64\\\": _llvm_floor_f64, \\\"_llvm_log10_f32\\\": _llvm_log10_f32, \\\"_llvm_log10_f64\\\": _llvm_log10_f64, \\\"_llvm_log_f64\\\": _llvm_log_f64, \\\"_llvm_sin_f64\\\": _llvm_sin_f64, \\\"_llvm_sqrt_f32\\\": _llvm_sqrt_f32, \\\"_llvm_sqrt_f64\\\": _llvm_sqrt_f64, \\\"_llvm_stackrestore\\\": _llvm_stackrestore, \\\"_llvm_stacksave\\\": _llvm_stacksave, \\\"flush_NO_FILESYSTEM\\\": flush_NO_FILESYSTEM, \\\"DYNAMICTOP_PTR\\\": DYNAMICTOP_PTR, \\\"tempDoublePtr\\\": tempDoublePtr, \\\"STACKTOP\\\": STACKTOP, \\\"STACK_MAX\\\": STACK_MAX };\\n// EMSCRIPTEN_START_ASM\\nvar asm =Module[\\\"asm\\\"]// EMSCRIPTEN_END_ASM\\n(Module.asmGlobalArg, Module.asmLibraryArg, buffer);\\n\\nModule[\\\"asm\\\"] = asm;\\nvar _free = Module[\\\"_free\\\"] = function() {  return Module[\\\"asm\\\"][\\\"_free\\\"].apply(null, arguments) };\\nvar _llvm_bswap_i32 = Module[\\\"_llvm_bswap_i32\\\"] = function() {  return Module[\\\"asm\\\"][\\\"_llvm_bswap_i32\\\"].apply(null, arguments) };\\nvar _malloc = Module[\\\"_malloc\\\"] = function() {  return Module[\\\"asm\\\"][\\\"_malloc\\\"].apply(null, arguments) };\\nvar _memcpy = Module[\\\"_memcpy\\\"] = function() {  return Module[\\\"asm\\\"][\\\"_memcpy\\\"].apply(null, arguments) };\\nvar _memmove = Module[\\\"_memmove\\\"] = function() {  return Module[\\\"asm\\\"][\\\"_memmove\\\"].apply(null, arguments) };\\nvar _memset = Module[\\\"_memset\\\"] = function() {  return Module[\\\"asm\\\"][\\\"_memset\\\"].apply(null, arguments) };\\nvar _opus_decode_float = Module[\\\"_opus_decode_float\\\"] = function() {  return Module[\\\"asm\\\"][\\\"_opus_decode_float\\\"].apply(null, arguments) };\\nvar _opus_decoder_create = Module[\\\"_opus_decoder_create\\\"] = function() {  return Module[\\\"asm\\\"][\\\"_opus_decoder_create\\\"].apply(null, arguments) };\\nvar _opus_decoder_destroy = Module[\\\"_opus_decoder_destroy\\\"] = function() {  return Module[\\\"asm\\\"][\\\"_opus_decoder_destroy\\\"].apply(null, arguments) };\\nvar _opus_encode_float = Module[\\\"_opus_encode_float\\\"] = function() {  return Module[\\\"asm\\\"][\\\"_opus_encode_float\\\"].apply(null, arguments) };\\nvar _opus_encoder_create = Module[\\\"_opus_encoder_create\\\"] = function() {  return Module[\\\"asm\\\"][\\\"_opus_encoder_create\\\"].apply(null, arguments) };\\nvar _opus_encoder_ctl = Module[\\\"_opus_encoder_ctl\\\"] = function() {  return Module[\\\"asm\\\"][\\\"_opus_encoder_ctl\\\"].apply(null, arguments) };\\nvar _rintf = Module[\\\"_rintf\\\"] = function() {  return Module[\\\"asm\\\"][\\\"_rintf\\\"].apply(null, arguments) };\\nvar _sbrk = Module[\\\"_sbrk\\\"] = function() {  return Module[\\\"asm\\\"][\\\"_sbrk\\\"].apply(null, arguments) };\\nvar _speex_resampler_destroy = Module[\\\"_speex_resampler_destroy\\\"] = function() {  return Module[\\\"asm\\\"][\\\"_speex_resampler_destroy\\\"].apply(null, arguments) };\\nvar _speex_resampler_init = Module[\\\"_speex_resampler_init\\\"] = function() {  return Module[\\\"asm\\\"][\\\"_speex_resampler_init\\\"].apply(null, arguments) };\\nvar _speex_resampler_process_interleaved_float = Module[\\\"_speex_resampler_process_interleaved_float\\\"] = function() {  return Module[\\\"asm\\\"][\\\"_speex_resampler_process_interleaved_float\\\"].apply(null, arguments) };\\nvar establishStackSpace = Module[\\\"establishStackSpace\\\"] = function() {  return Module[\\\"asm\\\"][\\\"establishStackSpace\\\"].apply(null, arguments) };\\nvar getTempRet0 = Module[\\\"getTempRet0\\\"] = function() {  return Module[\\\"asm\\\"][\\\"getTempRet0\\\"].apply(null, arguments) };\\nvar runPostSets = Module[\\\"runPostSets\\\"] = function() {  return Module[\\\"asm\\\"][\\\"runPostSets\\\"].apply(null, arguments) };\\nvar setTempRet0 = Module[\\\"setTempRet0\\\"] = function() {  return Module[\\\"asm\\\"][\\\"setTempRet0\\\"].apply(null, arguments) };\\nvar setThrew = Module[\\\"setThrew\\\"] = function() {  return Module[\\\"asm\\\"][\\\"setThrew\\\"].apply(null, arguments) };\\nvar stackAlloc = Module[\\\"stackAlloc\\\"] = function() {  return Module[\\\"asm\\\"][\\\"stackAlloc\\\"].apply(null, arguments) };\\nvar stackRestore = Module[\\\"stackRestore\\\"] = function() {  return Module[\\\"asm\\\"][\\\"stackRestore\\\"].apply(null, arguments) };\\nvar stackSave = Module[\\\"stackSave\\\"] = function() {  return Module[\\\"asm\\\"][\\\"stackSave\\\"].apply(null, arguments) };\\nvar dynCall_ii = Module[\\\"dynCall_ii\\\"] = function() {  return Module[\\\"asm\\\"][\\\"dynCall_ii\\\"].apply(null, arguments) };\\nvar dynCall_iiii = Module[\\\"dynCall_iiii\\\"] = function() {  return Module[\\\"asm\\\"][\\\"dynCall_iiii\\\"].apply(null, arguments) };\\nvar dynCall_iiiiiii = Module[\\\"dynCall_iiiiiii\\\"] = function() {  return Module[\\\"asm\\\"][\\\"dynCall_iiiiiii\\\"].apply(null, arguments) };\\nvar dynCall_viiiiiii = Module[\\\"dynCall_viiiiiii\\\"] = function() {  return Module[\\\"asm\\\"][\\\"dynCall_viiiiiii\\\"].apply(null, arguments) };\\n;\\n\\n\\n\\n// === Auto-generated postamble setup entry stuff ===\\n\\nModule['asm'] = asm;\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n// Modularize mode returns a function, which can be called to\\n// create instances. The instances provide a then() method,\\n// must like a Promise, that receives a callback. The callback\\n// is called when the module is ready to run, with the module\\n// as a parameter. (Like a Promise, it also returns the module\\n// so you can use the output of .then(..)).\\nModule['then'] = function(func) {\\n  // We may already be ready to run code at this time. if\\n  // so, just queue a call to the callback.\\n  if (Module['calledRun']) {\\n    func(Module);\\n  } else {\\n    // we are not ready to call then() yet. we must call it\\n    // at the same time we would call onRuntimeInitialized.\\n    var old = Module['onRuntimeInitialized'];\\n    Module['onRuntimeInitialized'] = function() {\\n      if (old) old();\\n      func(Module);\\n    };\\n  }\\n  return Module;\\n};\\n\\n/**\\n * @constructor\\n * @extends {Error}\\n * @this {ExitStatus}\\n */\\nfunction ExitStatus(status) {\\n  this.name = \\\"ExitStatus\\\";\\n  this.message = \\\"Program terminated with exit(\\\" + status + \\\")\\\";\\n  this.status = status;\\n};\\nExitStatus.prototype = new Error();\\nExitStatus.prototype.constructor = ExitStatus;\\n\\nvar initialStackTop;\\nvar calledMain = false;\\n\\ndependenciesFulfilled = function runCaller() {\\n  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)\\n  if (!Module['calledRun']) run();\\n  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled\\n}\\n\\n\\n\\n\\n\\n/** @type {function(Array=)} */\\nfunction run(args) {\\n  args = args || Module['arguments'];\\n\\n  if (runDependencies > 0) {\\n    return;\\n  }\\n\\n\\n  preRun();\\n\\n  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later\\n  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame\\n\\n  function doRun() {\\n    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening\\n    Module['calledRun'] = true;\\n\\n    if (ABORT) return;\\n\\n    ensureInitRuntime();\\n\\n    preMain();\\n\\n    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();\\n\\n\\n    postRun();\\n  }\\n\\n  if (Module['setStatus']) {\\n    Module['setStatus']('Running...');\\n    setTimeout(function() {\\n      setTimeout(function() {\\n        Module['setStatus']('');\\n      }, 1);\\n      doRun();\\n    }, 1);\\n  } else {\\n    doRun();\\n  }\\n}\\nModule['run'] = run;\\n\\n\\nfunction exit(status, implicit) {\\n\\n  // if this is just main exit-ing implicitly, and the status is 0, then we\\n  // don't need to do anything here and can just leave. if the status is\\n  // non-zero, though, then we need to report it.\\n  // (we may have warned about this earlier, if a situation justifies doing so)\\n  if (implicit && Module['noExitRuntime'] && status === 0) {\\n    return;\\n  }\\n\\n  if (Module['noExitRuntime']) {\\n  } else {\\n\\n    ABORT = true;\\n    EXITSTATUS = status;\\n    STACKTOP = initialStackTop;\\n\\n    exitRuntime();\\n\\n    if (Module['onExit']) Module['onExit'](status);\\n  }\\n\\n  Module['quit'](status, new ExitStatus(status));\\n}\\n\\nvar abortDecorators = [];\\n\\nfunction abort(what) {\\n  if (Module['onAbort']) {\\n    Module['onAbort'](what);\\n  }\\n\\n  if (what !== undefined) {\\n    out(what);\\n    err(what);\\n    what = JSON.stringify(what)\\n  } else {\\n    what = '';\\n  }\\n\\n  ABORT = true;\\n  EXITSTATUS = 1;\\n\\n  throw 'abort(' + what + '). Build with -s ASSERTIONS=1 for more info.';\\n}\\nModule['abort'] = abort;\\n\\nif (Module['preInit']) {\\n  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];\\n  while (Module['preInit'].length > 0) {\\n    Module['preInit'].pop()();\\n  }\\n}\\n\\n\\nModule[\\\"noExitRuntime\\\"] = true;\\n\\nrun();\\n\\n\\n\\n\\n\\n// {{MODULE_ADDITIONS}}\\n\\n\\n\\n\\n\\n  return FastSound;\\n}\\n);\\n})();\\nif (true)\\n    module.exports = FastSound;\\n  else {}\\n  \\n/* WEBPACK VAR INJECTION */}.call(this, \\\"/\\\"))//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///./unminified/fast-sound.js\\n\");\n\n/***/ }),\n\n/***/ \"fs\":\n/*!*********************!*\\\n  !*** external \"fs\" ***!\n  \\*********************/\n/*! no static exports found */\n/***/ (function(module, exports) {\n\neval(\"module.exports = __WEBPACK_EXTERNAL_MODULE_fs__;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9GYXN0U291bmQvZXh0ZXJuYWwgXCJmc1wiP2E0MGQiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX2ZzX187Il0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///fs\\n\");\n\n/***/ })\n\n/******/ });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/fast-sound/unminified/index.js\n");

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvd2VicGFjay9idWlsZGluL2dsb2JhbC5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL0VuY29kZXJXb3JrZXIvKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzP2NkMDAiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCkgfHwgKDEsIGV2YWwpKFwidGhpc1wiKTtcbn0gY2F0Y2ggKGUpIHtcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcblx0aWYgKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpIGcgPSB3aW5kb3c7XG59XG5cbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XG5cbm1vZHVsZS5leHBvcnRzID0gZztcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/webpack/buildin/global.js\n");

/***/ }),

/***/ "./src/encoderWorker.js":
/*!******************************!*\
  !*** ./src/encoderWorker.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(global) {\n\nconst FastSound = __webpack_require__(/*! fast-sound */ \"./node_modules/fast-sound/unminified/index.js\");\nlet encoder;\n\nglobal['onmessage'] = function( e ){\n  switch( e['data']['command'] ){\n  case 'encode':\n    if (encoder){\n      encoder.encode( e['data']['buffers'] );\n    }\n    break;\n\n  case 'done':\n    if (encoder) {\n      encoder.encodeFinalFrame();\n    }\n    break;\n\n  case 'init':\n    FastSound(e['data']['fastSound']).then(function(lib) {\n      encoder = new OggOpusEncoder( e['data'], lib );\n      global['postMessage']( {message: 'ready'} );\n    });\n    break;\n\n  default:\n    // Ignore any unknown commands and continue recieving commands\n  }\n};\n\nvar OggOpusEncoder = function( config, Module ){\n\n  if ( !Module ) {\n    throw new Error('Module with exports required to initialize an encoder instance');\n  }\n\n  this.config = Object.assign({ \n    bufferLength: 4096, // Define size of incoming buffer\n    encoderApplication: 2049, // 2048 = Voice (Lower fidelity)\n                              // 2049 = Full Band Audio (Highest fidelity)\n                              // 2051 = Restricted Low Delay (Lowest latency)\n    encoderFrameSize: 20, // Specified in ms.\n    encoderSampleRate: 48000, // Desired encoding sample rate. Audio will be resampled\n    maxFramesPerPage: 40, // Tradeoff latency with overhead\n    numberOfChannels: 1,\n    originalSampleRate: 44100,\n    resampleQuality: 3, // Value between 0 and 10 inclusive. 10 being highest quality.\n    serial: Math.floor(Math.random() * 4294967296)\n  }, config );\n\n  this._opus_encoder_create = Module._opus_encoder_create;\n  this._opus_encoder_ctl = Module._opus_encoder_ctl;\n  this._speex_resampler_process_interleaved_float = Module._speex_resampler_process_interleaved_float;\n  this._speex_resampler_init = Module._speex_resampler_init;\n  this._opus_encode_float = Module._opus_encode_float;\n  this._free = Module._free;\n  this._malloc = Module._malloc;\n  this.HEAPU8 = Module.HEAPU8;\n  this.HEAP32 = Module.HEAP32;\n  this.HEAPF32 = Module.HEAPF32;\n\n  this.pageIndex = 0;\n  this.granulePosition = 0;\n  this.segmentData = new Uint8Array( 65025 ); // Maximum length of oggOpus data\n  this.segmentDataIndex = 0;\n  this.segmentTable = new Uint8Array( 255 ); // Maximum data segments\n  this.segmentTableIndex = 0;\n  this.framesInPage = 0;\n\n  this.initChecksumTable();\n  this.initCodec();\n  this.initResampler();\n  this.generateIdPage();\n  this.generateCommentPage();\n\n  if ( this.config.numberOfChannels === 1 ) {\n    this.interleave = function( buffers ) { return buffers[0]; };\n  }\n  else {\n    this.interleavedBuffers = new Float32Array( this.config.bufferLength * this.config.numberOfChannels );\n  }\n\n};\n\nOggOpusEncoder.prototype.encode = function( buffers ) {\n  var samples = this.interleave( buffers );\n  var sampleIndex = 0;\n\n  while ( sampleIndex < samples.length ) {\n\n    var lengthToCopy = Math.min( this.resampleBufferLength - this.resampleBufferIndex, samples.length - sampleIndex );\n    this.resampleBuffer.set( samples.subarray( sampleIndex, sampleIndex+lengthToCopy ), this.resampleBufferIndex );\n    sampleIndex += lengthToCopy;\n    this.resampleBufferIndex += lengthToCopy;\n\n    if ( this.resampleBufferIndex === this.resampleBufferLength ) {\n      this._speex_resampler_process_interleaved_float( this.resampler, this.resampleBufferPointer, this.resampleSamplesPerChannelPointer, this.encoderBufferPointer, this.encoderSamplesPerChannelPointer );\n      var packetLength = this._opus_encode_float( this.encoder, this.encoderBufferPointer, this.encoderSamplesPerChannel, this.encoderOutputPointer, this.encoderOutputMaxLength );\n      this.segmentPacket( packetLength );\n      this.resampleBufferIndex = 0;\n\n      this.framesInPage++;\n      if ( this.framesInPage >= this.config.maxFramesPerPage ) {\n        this.generatePage();\n      }\n    }\n  }\n};\n\nOggOpusEncoder.prototype.encodeFinalFrame = function() {\n  var finalFrameBuffers = [];\n  for ( var i = 0; i < this.config.numberOfChannels; ++i ) {\n    finalFrameBuffers.push( new Float32Array( this.config.bufferLength - (this.resampleBufferIndex / this.config.numberOfChannels) ));\n  }\n  this.encode( finalFrameBuffers );\n  this.headerType += 4;\n  this.generatePage();\n  global['postMessage']( {message: 'done'} );\n  global['close']();\n};\n\nOggOpusEncoder.prototype.getChecksum = function( data ){\n  var checksum = 0;\n  for ( var i = 0; i < data.length; i++ ) {\n    checksum = (checksum << 8) ^ this.checksumTable[ ((checksum>>>24) & 0xff) ^ data[i] ];\n  }\n  return checksum >>> 0;\n};\n\nOggOpusEncoder.prototype.generateCommentPage = function(){\n  var segmentDataView = new DataView( this.segmentData.buffer );\n  segmentDataView.setUint32( 0, 1937076303, true ) // Magic Signature 'Opus'\n  segmentDataView.setUint32( 4, 1936154964, true ) // Magic Signature 'Tags'\n  segmentDataView.setUint32( 8, 10, true ); // Vendor Length\n  segmentDataView.setUint32( 12, 1868784978, true ); // Vendor name 'Reco'\n  segmentDataView.setUint32( 16, 1919247474, true ); // Vendor name 'rder'\n  segmentDataView.setUint16( 20, 21322, true ); // Vendor name 'JS'\n  segmentDataView.setUint32( 22, 0, true ); // User Comment List Length\n  this.segmentTableIndex = 1;\n  this.segmentDataIndex = this.segmentTable[0] = 26;\n  this.headerType = 0;\n  this.generatePage();\n};\n\nOggOpusEncoder.prototype.generateIdPage = function(){\n  var segmentDataView = new DataView( this.segmentData.buffer );\n  segmentDataView.setUint32( 0, 1937076303, true ) // Magic Signature 'Opus'\n  segmentDataView.setUint32( 4, 1684104520, true ) // Magic Signature 'Head'\n  segmentDataView.setUint8( 8, 1, true ); // Version\n  segmentDataView.setUint8( 9, this.config.numberOfChannels, true ); // Channel count\n  segmentDataView.setUint16( 10, 3840, true ); // pre-skip (80ms)\n  segmentDataView.setUint32( 12, this.config.originalSampleRateOverride || this.config.originalSampleRate, true ); // original sample rate\n  segmentDataView.setUint16( 16, 0, true ); // output gain\n  segmentDataView.setUint8( 18, 0, true ); // channel map 0 = mono or stereo\n  this.segmentTableIndex = 1;\n  this.segmentDataIndex = this.segmentTable[0] = 19;\n  this.headerType = 2;\n  this.generatePage();\n};\n\nOggOpusEncoder.prototype.generatePage = function(){\n  var granulePosition = ( this.lastPositiveGranulePosition === this.granulePosition) ? -1 : this.granulePosition;\n  var pageBuffer = new ArrayBuffer(  27 + this.segmentTableIndex + this.segmentDataIndex );\n  var pageBufferView = new DataView( pageBuffer );\n  var page = new Uint8Array( pageBuffer );\n\n  pageBufferView.setUint32( 0, 1399285583, true); // Capture Pattern starts all page headers 'OggS'\n  pageBufferView.setUint8( 4, 0, true ); // Version\n  pageBufferView.setUint8( 5, this.headerType, true ); // 1 = continuation, 2 = beginning of stream, 4 = end of stream\n\n  // Number of samples upto and including this page at 48000Hz, into signed 64 bit Little Endian integer\n  // Javascript Number maximum value is 53 bits or 2^53 - 1 \n  pageBufferView.setUint32( 6, granulePosition, true );\n  if (granulePosition < 0) {\n    pageBufferView.setInt32( 10, Math.ceil(granulePosition/4294967297) - 1, true );\n  }\n  else {\n    pageBufferView.setInt32( 10, Math.floor(granulePosition/4294967296), true );\n  }\n\n  pageBufferView.setUint32( 14, this.config.serial, true ); // Bitstream serial number\n  pageBufferView.setUint32( 18, this.pageIndex++, true ); // Page sequence number\n  pageBufferView.setUint8( 26, this.segmentTableIndex, true ); // Number of segments in page.\n  page.set( this.segmentTable.subarray(0, this.segmentTableIndex), 27 ); // Segment Table\n  page.set( this.segmentData.subarray(0, this.segmentDataIndex), 27 + this.segmentTableIndex ); // Segment Data\n  pageBufferView.setUint32( 22, this.getChecksum( page ), true ); // Checksum\n\n  global['postMessage']( {message: 'page', page: page}, [page.buffer] );\n  this.segmentTableIndex = 0;\n  this.segmentDataIndex = 0;\n  this.framesInPage = 0;\n  if ( granulePosition > 0 ) {\n    this.lastPositiveGranulePosition = granulePosition;\n  }\n};\n\nOggOpusEncoder.prototype.initChecksumTable = function(){\n  this.checksumTable = [];\n  for ( var i = 0; i < 256; i++ ) {\n    var r = i << 24;\n    for ( var j = 0; j < 8; j++ ) {\n      r = ((r & 0x80000000) != 0) ? ((r << 1) ^ 0x04c11db7) : (r << 1);\n    }\n    this.checksumTable[i] = (r & 0xffffffff);\n  }\n};\n\nOggOpusEncoder.prototype.setOpusControl = function( control, value ){\n  var location = this._malloc( 4 );\n  this.HEAP32[ location >> 2 ] = value;\n  this._opus_encoder_ctl( this.encoder, control, location );\n  this._free( location );\n};\n\nOggOpusEncoder.prototype.initCodec = function() {\n  var errLocation = this._malloc( 4 );\n  this.encoder = this._opus_encoder_create( this.config.encoderSampleRate, this.config.numberOfChannels, this.config.encoderApplication, errLocation );\n  this._free( errLocation );\n\n  if ( this.config.encoderBitRate ) {\n    this.setOpusControl( 4002, this.config.encoderBitRate );\n  }\n\n  if ( this.config.encoderComplexity ) {\n    this.setOpusControl( 4010, this.config.encoderComplexity );\n  }\n\n  this.encoderSamplesPerChannel = this.config.encoderSampleRate * this.config.encoderFrameSize / 1000;\n  this.encoderSamplesPerChannelPointer = this._malloc( 4 );\n  this.HEAP32[ this.encoderSamplesPerChannelPointer >> 2 ] = this.encoderSamplesPerChannel;\n\n  this.encoderBufferLength = this.encoderSamplesPerChannel * this.config.numberOfChannels;\n  this.encoderBufferPointer = this._malloc( this.encoderBufferLength * 4 ); // 4 bytes per sample\n  this.encoderBuffer = this.HEAPF32.subarray( this.encoderBufferPointer >> 2, (this.encoderBufferPointer >> 2) + this.encoderBufferLength );\n\n  this.encoderOutputMaxLength = 4000;\n  this.encoderOutputPointer = this._malloc( this.encoderOutputMaxLength );\n  this.encoderOutputBuffer = this.HEAPU8.subarray( this.encoderOutputPointer, this.encoderOutputPointer + this.encoderOutputMaxLength );\n};\n\nOggOpusEncoder.prototype.initResampler = function() {\n  var errLocation = this._malloc( 4 );\n  this.resampler = this._speex_resampler_init( this.config.numberOfChannels, this.config.originalSampleRate, this.config.encoderSampleRate, this.config.resampleQuality, errLocation );\n  this._free( errLocation );\n\n  this.resampleBufferIndex = 0;\n  this.resampleSamplesPerChannel = this.config.originalSampleRate * this.config.encoderFrameSize / 1000;\n  this.resampleSamplesPerChannelPointer = this._malloc( 4 );\n  this.HEAP32[ this.resampleSamplesPerChannelPointer >> 2 ] = this.resampleSamplesPerChannel;\n\n  this.resampleBufferLength = this.resampleSamplesPerChannel * this.config.numberOfChannels;\n  this.resampleBufferPointer = this._malloc( this.resampleBufferLength * 4 ); // 4 bytes per sample\n  this.resampleBuffer = this.HEAPF32.subarray( this.resampleBufferPointer >> 2, (this.resampleBufferPointer >> 2) + this.resampleBufferLength );\n};\n\nOggOpusEncoder.prototype.interleave = function( buffers ) {\n  for ( var i = 0; i < this.config.bufferLength; i++ ) {\n    for ( var channel = 0; channel < this.config.numberOfChannels; channel++ ) {\n      this.interleavedBuffers[ i * this.config.numberOfChannels + channel ] = buffers[ channel ][ i ];\n    }\n  }\n\n  return this.interleavedBuffers;\n};\n\nOggOpusEncoder.prototype.segmentPacket = function( packetLength ) {\n  var packetIndex = 0;\n\n  while ( packetLength >= 0 ) {\n\n    if ( this.segmentTableIndex === 255 ) {\n      this.generatePage();\n      this.headerType = 1;\n    }\n\n    var segmentLength = Math.min( packetLength, 255 );\n    this.segmentTable[ this.segmentTableIndex++ ] = segmentLength;\n    this.segmentData.set( this.encoderOutputBuffer.subarray( packetIndex, packetIndex + segmentLength ), this.segmentDataIndex );\n    this.segmentDataIndex += segmentLength;\n    packetIndex += segmentLength;\n    packetLength -= 255;\n  }\n\n  this.granulePosition += ( 48 * this.config.encoderFrameSize );\n  if ( this.segmentTableIndex === 255 ) {\n    this.generatePage();\n    this.headerType = 0;\n  }\n};\n\nmodule.exports = {\n  OggOpusEncoder: OggOpusEncoder,\n  FastSound: FastSound\n};\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../node_modules/webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/encoderWorker.js\n");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = __WEBPACK_EXTERNAL_MODULE_fs__;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9FbmNvZGVyV29ya2VyL2V4dGVybmFsIFwiZnNcIj9hNDBkIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9mc19fOyJdLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///fs\n");

/***/ })

/******/ });
});